From 2d8dffbbfc0c431a37319d4d9a143836c9ec542e Mon Sep 17 00:00:00 2001
From: Anton Bachin <antonbachin@yahoo.com>
Date: Sun, 12 Oct 2025 18:12:24 +0300
Subject: [PATCH] Adapt to Cmdliner 2.0.0

Bisect_ppx now effectively requires OCaml 4.08, because Cmdliner 2.0.0
requires it. However, the code of Bisect_ppx proper can still easily be
made to compile against OCaml 4.03.

Resolves #444.

diff --git a/Makefile b/Makefile
index f1ddc883..1ce4f9ef 100644
--- Makefile
+++ Makefile
@@ -10,7 +10,7 @@ TEST := @runtest
 
 .PHONY : test
 test : build
-	dune build -p bisect_ppx $(TEST)
+	NO_COLOR=yes dune build -p bisect_ppx $(TEST)
 
 .PHONY : promote
 promote :
diff --git a/bisect_ppx.opam b/bisect_ppx.opam
index 77a20062..d7e57008 100644
--- bisect_ppx.opam
+++ bisect_ppx.opam
@@ -19,7 +19,7 @@ maintainer: [
 
 depends: [
   "base-unix"
-  "cmdliner" {>= "1.0.0"}
+  "cmdliner" {>= "1.3.0"}
   "dune" {>= "2.7.0"}
   "ocaml" {>= "4.03.0"}
   "ppxlib" {>= "0.28.0"}
diff --git a/src/report/main.ml b/src/report/main.ml
index 9f4f7191..37a2013a 100644
--- src/report/main.ml
+++ src/report/main.ml
@@ -21,29 +21,15 @@ let esy_source_dir =
   | exception Not_found -> []
   | directory -> [Filename.concat directory "default"]
 
-(* Many of the values used from Cmdliner.Term are deprecated in favor of values
-   from Cmdliner.Cmd. However, Cmdliner.Cmd was introduced in Cmdliner 1.1.0,
-   which requires OCaml 4.08.0. Bisect_ppx still supports OCaml 4.04, so Bisect
-   cannot use this recent version of Cmdliner. The 4.04 constraint itself is
-   only due to ppxlib.
-
-   So, suppress the deprecation warnings. *)
-module Term =
-struct
-  include Cmdliner.Term
-
-  let eval_choice = Cmdliner.Term.eval_choice [@ocaml.warning "-3"]
-  let exit = Cmdliner.Term.exit [@ocaml.warning "-3"]
-  let info = Cmdliner.Term.info [@ocaml.warning "-3"]
-end
-
 module Arg = Cmdliner.Arg
+module Cmd = Cmdliner.Cmd
+module Term = Cmdliner.Term
 
 
 
 (* Common arguments. *)
 
-let term_info = Term.info ~sdocs:"COMMON OPTIONS"
+let term_info = Cmd.info ~sdocs:"COMMON OPTIONS"
 
 let coverage_files from_position =
   Arg.(value @@ pos_right (from_position - 1) string [] @@
@@ -303,9 +289,8 @@ let merge =
 (* Entry point. *)
 
 let () =
-  Term.(eval_choice
-    (ret (const (`Help (`Auto, None))),
-    term_info
+  Cmd.group
+    (term_info
       "bisect-ppx-report"
       ~doc:"Generate coverage reports for OCaml and Reason."
       ~man:[
@@ -316,6 +301,10 @@ let () =
         `P
           ("See bisect-ppx-report $(i,COMMAND) --help for further " ^
           "information on each command, including options.")
-      ]))
-    [html; send_to; text; cobertura; coveralls; merge]
-  |> Term.exit
+      ]
+      ~exits:((Cmd.Exit.info ~doc:"on error." 1)::Cmd.Exit.defaults)
+      )
+    ([html; send_to; text; cobertura; coveralls; merge]
+    |> List.map (fun (term, info) -> Cmd.v info term))
+  |> Cmd.eval
+  |> exit
diff --git a/test/report/send-to.t b/test/report/send-to.t
index 7506a312..f0aee70d 100644
--- test/report/send-to.t
+++ test/report/send-to.t
@@ -16,16 +16,16 @@
 From Travis to Coveralls.
 
   $ bisect-ppx-report send-to --dry-run No-such-service --verbose 2>&1 | sed s/…/.../g | sed s/\`/\'/g
+  Usage: bisect-ppx-report send-to [--help] [OPTION]... SERVICE
+         [COVERAGE_FILES]...
   bisect-ppx-report: SERVICE argument: invalid value 'No-such-service',
                      expected either 'Codecov' or 'Coveralls'
-  Usage: bisect-ppx-report send-to [OPTION]... SERVICE [COVERAGE_FILES]...
-  Try 'bisect-ppx-report send-to --help' or 'bisect-ppx-report --help' for more information.
 
   $ bisect-ppx-report send-to --dry-run coveralls --verbose 2>&1 | sed s/…/.../g | sed s/\`/\'/g
+  Usage: bisect-ppx-report send-to [--help] [OPTION]... SERVICE
+         [COVERAGE_FILES]...
   bisect-ppx-report: SERVICE argument: invalid value 'coveralls', expected
                      either 'Codecov' or 'Coveralls'
-  Usage: bisect-ppx-report send-to [OPTION]... SERVICE [COVERAGE_FILES]...
-  Try 'bisect-ppx-report send-to --help' or 'bisect-ppx-report --help' for more information.
 
   $ bisect-ppx-report send-to --dry-run Coveralls --verbose
   Info: will write coverage report to 'coverage.json'
