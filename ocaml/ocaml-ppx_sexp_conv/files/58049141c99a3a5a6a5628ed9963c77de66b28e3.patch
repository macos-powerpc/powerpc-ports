From 58049141c99a3a5a6a5628ed9963c77de66b28e3 Mon Sep 17 00:00:00 2001
From: Diana Kalinichenko <dkalinichenko@janestreet.com>
Date: Thu, 29 May 2025 18:20:19 -0400
Subject: [PATCH] ppxlib.0.36.0

---
 expander/conversion.ml            | 2 +-
 expander/conversion.mli           | 2 +-
 expander/expand_of_sexp.ml        | 5 +++--
 expander/expand_sexp_of.ml        | 3 ++-
 expander/helpers.ml               | 2 +-
 expander/ppx_sexp_conv_grammar.ml | 3 ++-
 6 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/expander/conversion.ml b/expander/conversion.ml
index fa1cede..f404955 100644
--- a/expander/conversion.ml
+++ b/expander/conversion.ml
@@ -59,7 +59,7 @@ module Lambda = struct
   let maybe_apply_generic ~loc ~types ~binds maybe_arg cases =
     let expr =
       match maybe_arg with
-      | None -> pexp_function ~loc cases
+      | None -> pexp_function_cases ~loc cases
       | Some arg -> pexp_match ~loc arg cases
     in
     with_types ~loc ~types (with_let ~loc ~binds expr)
diff --git a/expander/conversion.mli b/expander/conversion.mli
index b56ce1b..5fabf49 100644
--- a/expander/conversion.mli
+++ b/expander/conversion.mli
@@ -2,7 +2,7 @@ open! Base
 open! Ppxlib
 
 (** Sexp conversion function, expressed as either a single expression or as a collection
-    of [match] cases. Expressing as cases rather than wrapping directly in [pexp_function]
+    of [match] cases. Expressing as cases rather than wrapping directly in [pexp_function_cases]
     allows us to simplify some expressions built on this. *)
 type t
 
diff --git a/expander/expand_of_sexp.ml b/expander/expand_of_sexp.ml
index 685154c..e1043eb 100644
--- a/expander/expand_of_sexp.ml
+++ b/expander/expand_of_sexp.ml
@@ -187,7 +187,8 @@
     | { ptyp_desc = Ptyp_class (_, _); _ }
     | { ptyp_desc = Ptyp_alias (_, _); _ }
     | { ptyp_desc = Ptyp_package _; _ }
-    | { ptyp_desc = Ptyp_extension _; _ } ->
+    | { ptyp_desc = Ptyp_extension _; _ }
+    | { ptyp_desc = Ptyp_open _; _ } ->
       Location.raise_errorf ~loc "Type unsupported for ppx [of_sexp] conversion"
 
   (* Conversion of tuples *)
@@ -702,7 +703,7 @@
     in
     let default_case = case ~lhs:(ppat_any ~loc) ~guard:None ~rhs:(eint ~loc (-1)) in
     let cases = List.concat [ field_cases; [ default_case ] ] in
-    pexp_function ~loc cases
+    pexp_function_cases ~loc cases
   ;;
 
   let create_arg_for_record_of_sexp td fields ~loc ~constructor =
diff --git a/expander/expand_sexp_of.ml b/expander/expand_sexp_of.ml
index 7c7a1d3..c044dfc 100644
--- a/expander/expand_sexp_of.ml
+++ b/expander/expand_sexp_of.ml
@@ -87,7 +87,8 @@
     | { ptyp_desc = Ptyp_class (_, _); _ }
     | { ptyp_desc = Ptyp_alias (_, _); _ }
     | { ptyp_desc = Ptyp_package _; _ }
-    | { ptyp_desc = Ptyp_extension _; _ } ->
+    | { ptyp_desc = Ptyp_extension _; _ }
+    | { ptyp_desc = Ptyp_open _; _ } ->
       Location.raise_errorf ~loc "Type unsupported for ppx [sexp_of] conversion"
 
   (* Conversion of tuples *)
diff --git a/expander/helpers.ml b/expander/helpers.ml
index 96b6ef3..e910a6d 100644
--- a/expander/helpers.ml
+++ b/expander/helpers.ml
@@ -156,7 +156,7 @@ let fresh_lambda ~loc apply =
 let rec is_value_expression expr =
   match expr.pexp_desc with
   (* Syntactic values. *)
-  | Pexp_ident _ | Pexp_constant _ | Pexp_function _ | Pexp_fun _ | Pexp_lazy _ -> true
+  | Pexp_ident _ | Pexp_constant _ | Pexp_function _ | Pexp_lazy _ -> true
   (* Type-only wrappers; we check their contents. *)
   | Pexp_constraint (expr, (_ : core_type))
   | Pexp_coerce (expr, (_ : core_type option), (_ : core_type))
diff --git a/expander/ppx_sexp_conv_grammar.ml b/expander/ppx_sexp_conv_grammar.ml
index a928d68..b041134 100644
--- a/expander/ppx_sexp_conv_grammar.ml
+++ b/expander/ppx_sexp_conv_grammar.ml
@@ -312,7 +312,8 @@
             grammar_of_polymorphic_variant ~loc ~rec_flag ~tags_of_doc_comments rows)
        | Ptyp_poly _ -> unsupported ~loc "explicitly polymorphic types"
        | Ptyp_package _ -> unsupported ~loc "first-class module types"
-       | Ptyp_extension _ -> unsupported ~loc "unexpanded ppx extensions")
+       | Ptyp_extension _ -> unsupported ~loc "unexpanded ppx extensions"
+       | Ptyp_open _ -> unsupported ~loc "local module open")
   in
   grammar_of_type_tags core_type grammar ~tags_of_doc_comments
 
