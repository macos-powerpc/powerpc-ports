From 138add3eddcd7f2b47c448d321cc474d613cc1ac Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Fri, 18 Jul 2025 00:23:03 +0800
Subject: [PATCH] macosx_minimal: fix ObjC

---
 modules/gui/minimal_macosx/intf.m | 148 +++++++++++++++++++-----------
 1 file changed, 94 insertions(+), 54 deletions(-)

diff --git modules/gui/minimal_macosx/intf.m modules/gui/minimal_macosx/intf.m
index b3a3923769..d606b3fb33 100644
--- modules/gui/minimal_macosx/intf.m
+++ modules/gui/minimal_macosx/intf.m
@@ -83,44 +83,64 @@ extern OSErr    CPSSetFrontProcess(CPSProcessSerNum *psn);
 /*****************************************************************************
  * Run: main loop
  *****************************************************************************/
+
 static void Run(intf_thread_t *p_intf)
 {
     CPSProcessSerNum PSN;
-    @autoreleasepool {
-        NSApplication *application = NSApplication.sharedApplication;
-        if (!CPSGetCurrentProcess(&PSN) && !CPSEnableForegroundOperation(&PSN,0x03,0x3C,0x2C,0x1103) && !CPSSetFrontProcess(&PSN)) {
-            application = NSApplication.sharedApplication;
-        } else {
-            msg_Err(p_intf, "Failed to start VLC minimal interface");
-            return;
-        }
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+    NSApplication *application = [NSApplication sharedApplication];
+    if (!CPSGetCurrentProcess(&PSN) && !CPSEnableForegroundOperation(&PSN,0x03,0x3C,0x2C,0x1103) && !CPSSetFrontProcess(&PSN)) {
+        application = [NSApplication sharedApplication];
+    } else {
+        msg_Err(p_intf, "Failed to start VLC minimal interface");
+        [pool drain];
+        return;
     }
+    [pool drain];
 }
 
 /*****************************************************************************
  * Vout window management
  *****************************************************************************/
 
+static void WindowEnableHelper(id args)
+{
+    NSRect rect = [((NSValue*)[args objectAtIndex:0]) rectValue];
+    VLCMinimalVoutWindow **pp_window = (VLCMinimalVoutWindow **)[[args objectAtIndex:1] pointerValue];
+    *pp_window = [[VLCMinimalVoutWindow alloc] initWithContentRect:rect];
+    [*pp_window makeKeyAndOrderFront:nil];
+}
+
 static int WindowEnable(vlc_window_t *p_wnd, const vlc_window_cfg_t *cfg)
 {
-    @autoreleasepool {
-        VLCMinimalVoutWindow __block *o_window;
-        NSRect proposedVideoViewPosition = NSMakeRect(cfg->x, cfg->y, cfg->width, cfg->height);
-
-        dispatch_sync(dispatch_get_main_queue(), ^{
-            o_window = [[VLCMinimalVoutWindow alloc] initWithContentRect:proposedVideoViewPosition];
-            [o_window makeKeyAndOrderFront:nil];
-        });
-
-        if (!o_window) {
-            msg_Err(p_wnd, "window creation failed");
-            return VLC_EGENERIC;
-        }
-
-        msg_Dbg(p_wnd, "returning video window with proposed position x=%i, y=%i, width=%i, height=%i", cfg->x, cfg->y, cfg->width, cfg->height);
-        p_wnd->handle.nsobject = (void *)CFBridgingRetain([o_window contentView]);
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+    VLCMinimalVoutWindow *o_window = nil;
+    NSRect proposedVideoViewPosition = NSMakeRect(cfg->x, cfg->y, cfg->width, cfg->height);
+
+    if ([NSThread isMainThread]) {
+        o_window = [[VLCMinimalVoutWindow alloc] initWithContentRect:proposedVideoViewPosition];
+        [o_window makeKeyAndOrderFront:nil];
+    } else {
+        VLCMinimalVoutWindow *window_result = nil;
+        NSValue *rectValue = [NSValue valueWithRect:proposedVideoViewPosition];
+        NSValue *windowPtrValue = [NSValue valueWithPointer:&window_result];
+        NSArray *args = [[NSArray alloc] initWithObjects:rectValue, windowPtrValue, nil];
+        [WindowEnableHelper performSelectorOnMainThread:@selector(invoke:) withObject:args waitUntilDone:YES];
+        o_window = window_result;
+        [args release];
     }
 
+    if (!o_window) {
+        msg_Err(p_wnd, "window creation failed");
+        [pool drain];
+        return VLC_EGENERIC;
+    }
+
+    msg_Dbg(p_wnd, "returning video window with proposed position x=%i, y=%i, width=%i, height=%i", cfg->x, cfg->y, cfg->width, cfg->height);
+    p_wnd->handle.nsobject = (void *)[(id)[o_window contentView] retain];
+
+    [pool drain];
+
     if (cfg->is_fullscreen)
         vlc_window_SetFullScreen(p_wnd, NULL);
     return VLC_SUCCESS;
@@ -128,55 +148,75 @@ static int WindowEnable(vlc_window_t *p_wnd, const vlc_window_cfg_t *cfg)
 
 static void WindowDisable(vlc_window_t *p_wnd)
 {
-    @autoreleasepool {
-        NSWindow * o_window = [(__bridge id)p_wnd->handle.nsobject window];
-        if (o_window)
-            o_window = nil;
-    }
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+    NSWindow *o_window = [(id)p_wnd->handle.nsobject window];
+    if (o_window)
+        o_window = nil;
+    [pool drain];
 }
 
-static void WindowResize(vlc_window_t *p_wnd,
-                         unsigned i_width, unsigned i_height)
+static void WindowResizeHelper(NSArray *params)
 {
-    NSWindow* o_window = [(__bridge id)p_wnd->handle.nsobject window];
-
-    @autoreleasepool {
-        dispatch_sync(dispatch_get_main_queue(), ^{
-            NSRect theFrame = [o_window frame];
-            theFrame.size.width = i_width;
-            theFrame.size.height = i_height;
-            [o_window setFrame:theFrame display:YES animate:YES];
-        });
+    NSWindow *o_window = [params objectAtIndex:0];
+    NSNumber *width = [params objectAtIndex:1];
+    NSNumber *height = [params objectAtIndex:2];
+
+    NSRect theFrame = [o_window frame];
+    theFrame.size.width = [width unsignedIntValue];
+    theFrame.size.height = [height unsignedIntValue];
+    [o_window setFrame:theFrame display:YES animate:YES];
+}
+
+static void WindowResize(vlc_window_t *p_wnd, unsigned i_width, unsigned i_height)
+{
+    NSWindow *o_window = [(id)p_wnd->handle.nsobject window];
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+
+    NSArray *params = [[NSArray alloc] initWithObjects:o_window, [NSNumber numberWithUnsignedInt:i_width], [NSNumber numberWithUnsignedInt:i_height], nil];
+
+    if ([NSThread isMainThread]) {
+        WindowResizeHelper(params);
+    } else {
+        [WindowResizeHelper performSelectorOnMainThread:@selector(invoke:) withObject:params waitUntilDone:YES];
     }
+    [params release];
+    [pool drain];
 }
 
 static void WindowSetState(vlc_window_t *p_wnd, unsigned state)
 {
-    NSWindow* o_window = [(__bridge id)p_wnd->handle.nsobject window];
-
+    NSWindow* o_window = [(id)p_wnd->handle.nsobject window];
     [o_window setLevel:state];
 }
 
 static void WindowUnsetFullscreen(vlc_window_t *p_wnd)
 {
-    NSWindow* o_window = [(__bridge id)p_wnd->handle.nsobject window];
-
-    @autoreleasepool {
-        dispatch_sync(dispatch_get_main_queue(), ^{
-            [(VLCMinimalVoutWindow*)o_window leaveFullscreen];
-        });
+    NSWindow* o_window = [(id)p_wnd->handle.nsobject window];
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+
+    if ([NSThread isMainThread]) {
+        [(VLCMinimalVoutWindow*)o_window leaveFullscreen];
+    } else {
+        [(VLCMinimalVoutWindow*)o_window performSelectorOnMainThread:@selector(leaveFullscreen)
+                                                          withObject:nil
+                                                       waitUntilDone:YES];
     }
+    [pool drain];
 }
 
 static void WindowSetFullscreen(vlc_window_t *p_wnd, const char *psz_id)
 {
-    NSWindow* o_window = [(__bridge id)p_wnd->handle.nsobject window];
-
-    @autoreleasepool {
-        dispatch_sync(dispatch_get_main_queue(), ^{
-            [(VLCMinimalVoutWindow*)o_window enterFullscreen];
-        });
+    NSWindow* o_window = [(id)p_wnd->handle.nsobject window];
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+
+    if ([NSThread isMainThread]) {
+        [(VLCMinimalVoutWindow*)o_window enterFullscreen];
+    } else {
+        [(VLCMinimalVoutWindow*)o_window performSelectorOnMainThread:@selector(enterFullscreen)
+                                                          withObject:nil
+                                                       waitUntilDone:YES];
     }
+    [pool drain];
 }
 
 static const struct vlc_window_operations ops = {
-- 
2.49.0

