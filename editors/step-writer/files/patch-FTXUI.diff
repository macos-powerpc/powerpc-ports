--- src/Editor.cpp	2025-02-25 02:28:12.000000000 +0800
+++ src/Editor.cpp	2025-08-30 12:21:06.000000000 +0800
@@ -88,7 +88,7 @@
             vbox(elements),
             text("") | center,
             text("") | center,
-            buttons->Render() | center,
+            buttons->OnRender() | center,
         }) | center;
     });
 
@@ -119,11 +119,11 @@
     mainScreen = ftxui::Renderer([&](bool focused) {
         if (focused) {
             tfv->SignalEditorModeChange();
-            return tfv->Render();
+            return tfv->OnRender();
         }
         else {
             status_EditorMode = "EXPLORER";
-            return tfv->Render();
+            return tfv->OnRender();
         }
     });
 
@@ -133,7 +133,7 @@
 
     explorer = root->RenderTree();
     auto t = Renderer(explorer, [&] {
-        return explorer->Render() | vscroll_indicator | frame | size(HEIGHT, LESS_THAN, GetScreen().dimy()-3);
+        return explorer->OnRender() | vscroll_indicator | frame | size(HEIGHT, LESS_THAN, GetScreen().dimy()-3);
     });
 
     mainScreen = ResizableSplitLeft(t, mainScreen, &left_size);
@@ -155,14 +155,14 @@
     // Create a vertical layout with mainScreen and status_bar
     auto main_with_status_bar = Renderer([&] {
         return vbox({
-            mainScreen->Render() | flex_grow,
+            mainScreen->OnRender() | flex_grow,
             hbox({
-                status_bar->Render(),
+                status_bar->OnRender(),
             }) | size(HEIGHT, EQUAL, 1) | bgcolor(Color::Blue)
         });
     });
 
-    auto EditorComponent = ftxui::Renderer(composition, [&] { return window(text("Editor.cpp") | color(Color::Blue) | hcenter | bold, main_with_status_bar->Render());});
+    auto EditorComponent = ftxui::Renderer(composition, [&] { return window(text("Editor.cpp") | color(Color::Blue) | hcenter | bold, main_with_status_bar->OnRender());});
     EditorComponent |= Modal(modal_component, &showTerminal);
 
     EditorComponent |= ftxui::CatchEvent([&](ftxui::Event event) {

--- src/TextFileViewer.cpp	2025-02-25 02:28:12.000000000 +0800
+++ src/TextFileViewer.cpp	2025-08-30 12:14:11.000000000 +0800
@@ -41,7 +41,7 @@
     return Editor::GetInstance().left_size + numPadding + 4 + x;
 }
 
-ftx::Element TextFileViewer::Render() {
+ftxui::Element TextFileViewer::OnRender() {
     using namespace ftx;
     Elements elements;
 
--- include/TextFileViewer.h	2025-02-25 02:28:12.000000000 +0800
+++ include/TextFileViewer.h	2025-08-30 12:09:37.000000000 +0800
@@ -17,7 +17,7 @@
 class TextFileViewer : public ftx::ComponentBase {
 public:
     TextFileViewer(const std::string& file_path);
-    ftx::Element Render() override;
+    ftxui::Element OnRender() override;
     bool UpdateDocument(const std::string& path);
     bool HandleInput(ftxui::Event event);
     Document document;
