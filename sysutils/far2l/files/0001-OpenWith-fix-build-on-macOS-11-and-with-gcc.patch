From d019caf2a5ac271f0ed839e03b6c262905520d65 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Sun, 12 Oct 2025 12:27:40 +0800
Subject: [PATCH] OpenWith: fix build on macOS < 11 and with gcc

Closes: https://github.com/elfmz/far2l/issues/2982
---
 OpenWith/CMakeLists.txt          |  9 +++++++--
 OpenWith/src/MacOSAppProvider.mm | 19 ++++++++++++++++++-
 2 files changed, 25 insertions(+), 3 deletions(-)

diff --git OpenWith/CMakeLists.txt OpenWith/CMakeLists.txt
index 9133c8b2..47d081b3 100644
--- OpenWith/CMakeLists.txt
+++ OpenWith/CMakeLists.txt
@@ -19,9 +19,14 @@ if(APPLE)
     target_link_libraries(${PROJECT_NAME}
         "-framework Cocoa"
         "-framework CoreServices"
-        "-framework UniformTypeIdentifiers"
     )
-    target_compile_options(${PROJECT_NAME} PRIVATE "-fobjc-arc")
+    # macOS 11
+    if(${CMAKE_SYSTEM_VERSION} VERSION_GREATER_EQUAL 20.1.0)
+        target_link_libraries(${PROJECT_NAME} "-framework UniformTypeIdentifiers")
+    endif()
+    if(${CMAKE_CXX_COMPILER} MATCHES "Clang")
+        target_compile_options(${PROJECT_NAME} PRIVATE "-fobjc-arc")
+    endif()
 endif()
 
 target_compile_definitions(OpenWith PRIVATE)
diff --git OpenWith/src/MacOSAppProvider.mm OpenWith/src/MacOSAppProvider.mm
index baea4ce9..6749c6e6 100644
--- OpenWith/src/MacOSAppProvider.mm
+++ OpenWith/src/MacOSAppProvider.mm
@@ -1,7 +1,11 @@
 #if defined(__APPLE__)
 
+#include <AvailabilityMacros.h>
+
 #import <Cocoa/Cocoa.h>
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
 #import <UniformTypeIdentifiers/UniformTypeIdentifiers.h>
+#endif
 #include "MacOSAppProvider.hpp"
 #include "lng.hpp"
 #include "WideMB.h"
@@ -146,7 +150,11 @@ std::vector<CandidateInfo> MacOSAppProvider::GetAppCandidates(const std::vector<
         } else {
             // Cache miss: Query the system for the application lists.
             defaultAppURL = [[NSWorkspace sharedWorkspace] URLForApplicationToOpenURL:fileURL];
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
             allAppURLs = [[NSWorkspace sharedWorkspace] URLsForApplicationsToOpenURL:fileURL];
+#else
+            allAppURLs = defaultAppURL ? @[defaultAppURL] : @[];
+#endif
             // Store the results in the cache for subsequent files of the same type.
             uti_cache[uti] = {defaultAppURL, allAppURLs};
         }
@@ -312,7 +320,7 @@ std::vector<std::wstring> MacOSAppProvider::GetMimeTypes(const std::vector<std::
         std::wstring result;
 
         // Use the appropriate API based on the target macOS version.
-#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 110000 // UTType is available on macOS 11.0+
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000 // UTType is available on macOS 11.0+
         // Modern approach for macOS 11.0 and later, converting a UTI to a MIME type.
         UTType *type = [UTType typeWithIdentifier:uti];
         if (type) {
@@ -321,6 +329,7 @@ std::vector<std::wstring> MacOSAppProvider::GetMimeTypes(const std::vector<std::
         }
 #else
         // Legacy approach for older macOS versions.
+#ifdef __clang__
         CFStringRef mimeType = UTTypeCopyPreferredTagWithClass((__bridge CFStringRef)uti,
                                                                kUTTagClassMIMEType);
         if (mimeType) {
@@ -328,6 +337,14 @@ std::vector<std::wstring> MacOSAppProvider::GetMimeTypes(const std::vector<std::
             NSString *mimeStr = (__bridge_transfer NSString *)mimeType;
             result = StrMB2Wide([mimeStr UTF8String]);
         }
+#else // gcc does not support ARC.
+        CFStringRef mimeType = UTTypeCopyPreferredTagWithClass((CFStringRef)uti,
+                                                               kUTTagClassMIMEType);
+        if (mimeType) {
+            NSString *mimeStr = [(NSString *)mimeType autorelease];
+            result = StrMB2Wide([mimeStr UTF8String]);
+        }
+#endif
 #endif
         unique_mimes.insert(result.empty() ? fallback_mime : result);
     }
