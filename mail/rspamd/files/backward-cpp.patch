From d1184af35dfc6e1b414544d42a51f8cf929806d1 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 29 Mar 2025 23:32:02 +0800
Subject: [PATCH] backward.hpp: fix for macOS PowerPC

---
 backward.hpp | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/backward.hpp b/backward.hpp
index 2342b18..b87d385 100644
--- contrib/backward-cpp/backward.hpp
+++ contrib/backward-cpp/backward.hpp
@@ -4269,6 +4269,8 @@ class SignalHandling {
 #elif defined(__mips__)
     error_addr = reinterpret_cast<void *>(
         reinterpret_cast<struct sigcontext *>(&uctx->uc_mcontext)->sc_pc);
+#elif defined(__APPLE__) && defined(__POWERPC__)
+    error_addr = reinterpret_cast<void *>(uctx->uc_mcontext->__ss.__srr0);
 #elif defined(__ppc__) || defined(__powerpc) || defined(__powerpc__) ||        \
     defined(__POWERPC__)
     error_addr = reinterpret_cast<void *>(uctx->uc_mcontext.regs->nip);


From a2e3284dc6e54199992a364db69701ef631f9eef Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Fri, 26 Sep 2025 20:53:02 +0800
Subject: [PATCH] Fix ucontext for powerpc darwin

---
 backward.hpp | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/backward.hpp b/backward.hpp
index 263cd1b..fa176e3 100644
--- contrib/backward-cpp/backward.hpp
+++ contrib/backward-cpp/backward.hpp
@@ -1003,7 +1003,8 @@ class StackTraceImpl<system_tag::current_tag> : public StackTraceImplHolder {
       ctx.uc_mcontext.fault_address = uctx->uc_mcontext.fault_address;
       _stacktrace[index] = reinterpret_cast<void *>(ctx.uc_mcontext.pc);
       ++index;
-#elif defined(__APPLE__) && defined(__x86_64__)
+#elif defined(__APPLE__)
+   #if defined(__x86_64__)
       unw_getcontext(&ctx);
       // OS X's implementation of libunwind uses its own context object
       // so we need to convert the passed context to libunwind's format
@@ -1037,7 +1038,7 @@ class StackTraceImpl<system_tag::current_tag> : public StackTraceImplHolder {
       }
       _stacktrace[index] = reinterpret_cast<void *>(ctx.data[16]);
       ++index;
-#elif defined(__APPLE__)
+   #elif defined(__i386__)
       unw_getcontext(&ctx)
           // TODO: Convert the ucontext_t to libunwind's unw_context_t like
           // we do in 64 bits
@@ -1048,6 +1049,18 @@ class StackTraceImpl<system_tag::current_tag> : public StackTraceImplHolder {
       _stacktrace[index] =
           reinterpret_cast<void *>(ctx.uc_mcontext->__ss.__eip);
       ++index;
+   #else // PowerPC
+      unw_getcontext(&ctx)
+          // TODO: Convert the ucontext_t to libunwind's unw_context_t like
+          // we do in x86_64 case.
+          if (ctx.uc_mcontext->__ss.__srr0 ==
+              reinterpret_cast<greg_t>(error_addr())) {
+        ctx.uc_mcontext->__ss.__srr0 = ctx.uc_mcontext->__ss.__r1;
+      }
+      _stacktrace[index] =
+          reinterpret_cast<void *>(ctx.uc_mcontext->__ss.__srr0);
+      ++index;
+   #endif
 #endif
     }
 
