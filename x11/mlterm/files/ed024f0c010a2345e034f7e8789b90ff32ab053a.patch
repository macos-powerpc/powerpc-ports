From ed024f0c010a2345e034f7e8789b90ff32ab053a Mon Sep 17 00:00:00 2001
From: arakiken <arakiken@users.sf.net>
Date: Fri, 15 Aug 2025 13:37:57 +0900
Subject: [PATCH] * man/mlterm.1, README.ja, PROTOCOL: Updated. *

diff --git a/uitoolkit/ui_main_config.c b/uitoolkit/ui_main_config.c
index aaddfd7c..2e04b303 100644
--- uitoolkit/ui_main_config.c
+++ uitoolkit/ui_main_config.c
@@ -12,6 +12,7 @@
 #include <pobl/bl_unistd.h> /* bl_setenv */
 
 #include <vt_term_manager.h>
+#include <vt_shape.h> /* vt_set_use_arabic_dynamic_comb */
 #include "ui_selection_encoding.h"
 #include "ui_emoji.h"
 #include "ui_sb_view_factory.h"
@@ -340,6 +341,8 @@ void ui_prepare_for_main_config(bl_conf_t *conf) {
                   "modifier keys to stop mouse reporting [shift,control]");
   bl_conf_add_opt(conf, '\0', "clp", 1, "use_clipping",
                   "Use clipping to keep from producing dots outside the text drawing area [false]");
+  bl_conf_add_opt(conf, '\0', "adc", 1, "use_arabic_dynamic_comb",
+                  "Use dynamic combining to show arabic presentation forms [true]");
 #ifdef USE_WIN32API
   bl_conf_add_opt(conf, '\0', "winsize", 1, "output_xtwinops_in_resizing",
                   "output xtwinops sequence in resizing [false]");
@@ -467,6 +470,14 @@ void ui_main_config_init(ui_main_config_t *main_config, bl_conf_t *conf, int arg
     }
   }
 
+  if ((value = bl_conf_get_value(conf, "use_arabic_dynamic_comb"))) {
+    int flag = true_or_false(value);
+
+    if (flag != -1) {
+      vt_set_use_arabic_dynamic_comb(flag);
+    }
+  }
+
   if ((value = bl_conf_get_value(conf, "logging_vt_seq"))) {
     if (strcmp(value, "true") == 0) {
       main_config->logging_vt_seq = 1;
diff --git a/uitoolkit/xlib/ui_font.c b/uitoolkit/xlib/ui_font.c
index aa57e834..577b821e 100644
--- uitoolkit/xlib/ui_font.c
+++ uitoolkit/xlib/ui_font.c
@@ -665,8 +665,8 @@ int xft_set_ot_font(ui_font_t *font);
                                    advances, noshape_glyphs, src, src_len, script, features) \
   ft_convert_text_to_glyphs(font, shape_glyphs, num_shape_glyphs, xoffsets, yoffsets, advances, \
                             noshape_glyphs, src, src_len, script, features)
-u_int ft_convert_text_to_glyphs(ui_font_t *font, u_int32_t *shape_glyphs, int8_t *xoffsets,
-                                int8_t *yoffsets, u_int8_t *advances, u_int num_shape_glyphs,
+u_int ft_convert_text_to_glyphs(ui_font_t *font, u_int32_t *shape_glyphs, u_int shaped_len,
+                                int8_t *xoffsets, int8_t *yoffsets, u_int8_t *advances,
                                 u_int32_t *noshape_glyphs, u_int32_t *src, u_int src_len,
                                 const char *script, const char *features);
 #endif
@@ -734,8 +734,8 @@ int cairo_set_ot_font(ui_font_t *font);
   ft_convert_text_to_glyphs(font, shape_glyphs, num_shape_glyphs, xoffsets, yoffsets, advances, \
                             noshape_glyphs, src, src_len, script, features)
 #ifndef USE_TYPE_XFT
-u_int ft_convert_text_to_glyphs(ui_font_t *font, u_int32_t *shape_glyphs, int8_t *xoffsets,
-                                int8_t *yoffsets, u_int8_t *advances, u_int num_shape_glyphs,
+u_int ft_convert_text_to_glyphs(ui_font_t *font, u_int32_t *shape_glyphs, u_int shaped_len,
+                                int8_t *xoffsets, int8_t *yoffsets, u_int8_t *advances,
                                 u_int32_t *noshape_glyphs, u_int32_t *src, u_int src_len,
                                 const char *script, const char *features);
 #endif
diff --git a/vtemu/libctl/vt_bidi.c b/vtemu/libctl/vt_bidi.c
index 6d3c3391..34e55c50 100644
--- vtemu/libctl/vt_bidi.c
+++ vtemu/libctl/vt_bidi.c
@@ -53,22 +53,22 @@ int vt_bidi_destroy(vt_bidi_state_t state) {
 }
 
 /* vt_shape_bidi.c */
-u_int vt_is_arabic_combining(u_int32_t *str, u_int len);
+u_int vt_is_arabic_combining(u_int32_t *str, u_int len, int force);
 
 static void adjust_comb_pos_in_order(vt_char_t *vtstr, FriBidiChar *str,
                                      FriBidiStrIndex *order, u_int size) {
   u_int pos;
 
   /*
-   *         0x644 0x622
-   * Logical 0     1
-   * Visual  1     0     (fribidi_log2vis)
-   * Visual  0     0
+   *           0x644 0x622
+   * Logical   0     1
+   * Visual    1     0     (fribidi_log2vis)
+   * -> Visual 0     0
    */
   for (pos = 0; pos < size - 1 /* Not necessary to check the last ch */; pos++) {
     u_int comb_num;
 
-    if ((comb_num = vt_is_arabic_combining(str + pos, size - pos)) > 0) {
+    if ((comb_num = vt_is_arabic_combining(str + pos, size - pos, 0)) > 0) {
       u_int pos2;
       u_int count;
 
@@ -77,9 +77,10 @@ static void adjust_comb_pos_in_order(vt_char_t *vtstr, FriBidiChar *str,
 #endif
       {
         /*
-         * 0x644 0x622 -> arabic combining
-         * 0x644 0xXXX 0x622 0xXXX -> not arabic combining
-         * (0xXXX: combining character)
+         * If str is 0x644 0x622, vtstr can be one of the following:
+         * - 0x644 0x622 -> arabic combining
+         * - 0x644 0xXXX 0x622 0xXXX -> not arabic combining
+         *   (0xXXX: combining character)
          */
         for (count = 0; count < comb_num + 1; count++) {
           u_int num;
diff --git a/vtemu/libctl/vt_functbl_bidi.c b/vtemu/libctl/vt_functbl_bidi.c
index e537496c..26121dad 100644
--- vtemu/libctl/vt_functbl_bidi.c
+++ vtemu/libctl/vt_functbl_bidi.c
@@ -24,6 +24,5 @@ void *vt_ctl_bidi_func_table[MAX_CTL_BIDI_FUNCS] = {
     vt_line_bidi_convert_visual_char_index_to_logical, vt_line_bidi_copy_logical_str,
     vt_line_bidi_is_rtl, vt_shape_arabic, vt_is_rtl_char, vt_bidi_copy,
     vt_bidi_reset, vt_line_bidi_need_shape, vt_line_bidi_render, vt_line_bidi_visual,
-    vt_line_bidi_logical,
-
+    vt_line_bidi_logical, vt_set_use_arabic_dynamic_comb, vt_get_use_arabic_dynamic_comb,
 };
diff --git a/vtemu/libctl/vt_line_bidi.c b/vtemu/libctl/vt_line_bidi.c
index c5d471a8..005fd81c 100644
--- vtemu/libctl/vt_line_bidi.c
+++ vtemu/libctl/vt_line_bidi.c
@@ -294,7 +294,7 @@ int vt_line_bidi_visual(vt_line_t *line) {
   return 1;
 }
 
-u_int vt_is_arabic_combining(u_int32_t *str, u_int len);
+u_int vt_is_arabic_combining(u_int32_t *str, u_int len, int force);
 
 /* The caller should check vt_line_is_using_bidi() in advance. */
 int vt_line_bidi_logical(vt_line_t *line) {
@@ -333,7 +333,8 @@ int vt_line_bidi_logical(vt_line_t *line) {
       if ((comb = vt_get_combining_chars(src + vis_pos, &num))) {
         str[0] = vt_char_code(src + vis_pos);
         str[1] = vt_char_code(comb);
-        if (vt_is_arabic_combining(str, 2)) {
+        /* force == 1 to check if str contains already dynamically combined arabic chars. */
+        if (vt_is_arabic_combining(str, 2, 1)) {
 #ifdef __DEBUG
           bl_debug_printf("Uncombine arabic character %x from %x\n",
                           vt_char_code(comb), vt_char_code(src + vis_pos));
diff --git a/vtemu/libctl/vt_shape_bidi.c b/vtemu/libctl/vt_shape_bidi.c
index 96ea3d0f..d2aa7fd1 100644
--- vtemu/libctl/vt_shape_bidi.c
+++ vtemu/libctl/vt_shape_bidi.c
@@ -167,6 +167,8 @@ static arabic_comb4_present_t arabic_comb4_present_table[] = {
 };
 #endif
 
+static int use_arabic_dynamic_comb = 1;
+
 /* --- static functions --- */
 
 static arabic_present_t *get_arabic_present(vt_char_t *ch) {
@@ -289,6 +291,14 @@ static u_int16_t get_arabic_comb4_present_code(vt_char_t *comb, u_int len) {
 
 /* --- global functions --- */
 
+void vt_set_use_arabic_dynamic_comb(int use) {
+  use_arabic_dynamic_comb = use;
+}
+
+int vt_get_use_arabic_dynamic_comb(void) {
+  return use_arabic_dynamic_comb;
+}
+
 #ifdef BL_DEBUG
 void TEST_vt_shape_bidi(void);
 #endif
@@ -401,7 +411,14 @@ u_int vt_shape_arabic(vt_char_t *dst, u_int dst_len, vt_char_t *src, u_int src_l
   return count;
 }
 
-u_int vt_is_arabic_combining(u_int32_t *str, u_int len) {
+/*
+ * force == 1: str contains already dynamically combined arabic chars (see vt_line_bidi.c)
+ */
+u_int vt_is_arabic_combining(u_int32_t *str, u_int len, int force) {
+  if (!use_arabic_dynamic_comb && !force) {
+    return 0;
+  }
+
   if (len >= 2) {
 #if 0
     if (str[0] == 0x626) {
@@ -456,6 +473,9 @@ void TEST_vt_shape_bidi(void) {
   int count;
   vt_char_t ch;
   arabic_present_t *present;
+  int orig_use_arabic_dynamic_comb = use_arabic_dynamic_comb;
+
+  use_arabic_dynamic_comb = 1;
 
   vt_char_init(&ch);
   vt_char_set_cs(&ch, ISO10646_UCS4_1);
@@ -466,6 +486,8 @@ void TEST_vt_shape_bidi(void) {
     assert(arabic_present_table[count].base == present->base);
   }
 
+  use_arabic_dynamic_comb = orig_use_arabic_dynamic_comb;
+
   bl_msg_printf("PASS vt_shape_bidi test.\n");
 }
 
diff --git a/vtemu/vt_ctl_loader.h b/vtemu/vt_ctl_loader.h
index 117140f2..6c13965c 100644
--- vtemu/vt_ctl_loader.h
+++ vtemu/vt_ctl_loader.h
@@ -22,6 +22,8 @@ typedef enum vt_ctl_bidi_id {
   VT_LINE_BIDI_RENDER,
   VT_LINE_BIDI_VISUAL,
   VT_LINE_BIDI_LOGICAL,
+  VT_SET_USE_ARABIC_DYNAMIC_COMB,
+  VT_GET_USE_ARABIC_DYNAMIC_COMB,
   MAX_CTL_BIDI_FUNCS,
 
 } vt_ctl_bidi_id_t;
@@ -45,7 +47,7 @@ typedef enum vt_ctl_iscii_id {
 
 } vt_ctl_iscii_id_t;
 
-#define CTL_API_VERSION 0x03
+#define CTL_API_VERSION 0x04
 #define CTL_API_COMPAT_CHECK_MAGIC \
   (((CTL_API_VERSION & 0x0f) << 28) | ((sizeof(vt_line_t) & 0xff) << 20))
 
diff --git a/vtemu/vt_parser.c b/vtemu/vt_parser.c
index 06f6ff67..7f19dddc 100644
--- vtemu/vt_parser.c
+++ vtemu/vt_parser.c
@@ -43,6 +43,7 @@ int wcwidth(wchar_t c);
 #include "vt_iscii.h"
 #include "vt_str_parser.h"
 #include "vt_transfer.h"
+#include "vt_shape.h" /* vt_{set|get}_use_arabic_dynamic_comb */
 
 #if defined(__CYGWIN__) || defined(__MSYS__)
 #include "cygfile.h"
@@ -8163,6 +8164,12 @@ int vt_parser_get_config(
     } else {
       value = "false";
     }
+  } else if (strcmp(key, "use_arabic_dynamic_comb") == 0) {
+    if (vt_get_use_arabic_dynamic_comb()) {
+      value = "true";
+    } else {
+      value = "false";
+    }
   } else if (strcmp(key, "challenge") == 0) {
     value = vt_get_proto_challenge();
     if (to_menu < 0) {
@@ -8376,6 +8383,12 @@ int vt_parser_set_config(vt_parser_t *vt_parser, const char *key, const char *va
     if ((flag = true_or_false(value)) != -1) {
       vt_parser->use_locked_title = flag;
     }
+  } else if (strcmp(key, "use_arabic_dynamic_comb") == 0) {
+    int flag;
+
+    if ((flag = true_or_false(value)) != -1) {
+      vt_set_use_arabic_dynamic_comb(flag);
+    }
   } else if (strncmp(key, "send_file", 9) == 0) {
     if (strstr(value, "..")) {
       /* insecure file name */
diff --git a/vtemu/vt_shape.c b/vtemu/vt_shape.c
index 14feb048..eafa05ce 100644
--- vtemu/vt_shape.c
+++ vtemu/vt_shape.c
@@ -93,6 +93,26 @@ static u_int get_shape_info(vt_ot_layout_state_t state, u_int32_t **glyphs,
 u_int vt_shape_arabic(vt_char_t *, u_int, vt_char_t *, u_int) __attribute__((weak));
 u_int vt_shape_iscii(vt_char_t *, u_int, vt_char_t *, u_int) __attribute__((weak));
 #endif
+#include <stdio.h>
+void vt_set_use_arabic_dynamic_comb(int use) {
+  void (*func)(int);
+
+  if (!(func = vt_load_ctl_bidi_func(VT_SET_USE_ARABIC_DYNAMIC_COMB))) {
+    return;
+  }
+
+  (*func)(use);
+}
+
+int vt_get_use_arabic_dynamic_comb(void) {
+  int (*func)();
+
+  if (!(func = vt_load_ctl_bidi_func(VT_GET_USE_ARABIC_DYNAMIC_COMB))) {
+    return 1;
+  }
+
+  return (*func)();
+}
 
 u_int vt_shape_arabic(vt_char_t *dst, u_int dst_len, vt_char_t *src, u_int src_len) {
   u_int (*func)(vt_char_t *dst, u_int dst_len, vt_char_t *src, u_int src_len);
diff --git a/vtemu/vt_shape.h b/vtemu/vt_shape.h
index 6cddfeaf..e2aa32fe 100644
--- vtemu/vt_shape.h
+++ vtemu/vt_shape.h
@@ -16,9 +16,15 @@
 
 u_int vt_shape_arabic(vt_char_t *dst, u_int dst_len, vt_char_t *src, u_int src_len);
 
+void vt_set_use_arabic_dynamic_comb(int use);
+
+int vt_get_use_arabic_dynamic_comb(void);
+
 #else
 
 #define vt_shape_arabic (NULL)
+#define vt_set_use_arabic_dynamic_comb(use) (0)
+#define vt_get_use_arabic_dynamic_comb() (0)
 
 #endif
 
