--- auxil/spicy/hilti/runtime/include/hilti/rt/global-state.h	2025-08-19 02:02:17.000000000 +0800
+++ auxil/spicy/hilti/runtime/include/hilti/rt/global-state.h	2025-08-20 12:51:15.000000000 +0800
@@ -9,6 +9,10 @@
 #include <unordered_map>
 #include <vector>
 
+#ifdef __APPLE__
+#include <xlocale.h> /* locale_t */
+#endif
+
 #include <hilti/rt/context.h>
 #include <hilti/rt/debug-logger.h>
 #include <hilti/rt/init.h>

--- auxil/spicy/hilti/runtime/src/fiber.cc	2025-08-19 02:02:17.000000000 +0800
+++ auxil/spicy/hilti/runtime/src/fiber.cc	2025-08-20 13:34:35.000000000 +0800
@@ -189,7 +189,7 @@
             if ( limit.rlim_cur < min_size )
                 throw RuntimeError(fmt("process stack size too small, need at least %zu KB", min_size / 1024));
 
-#if __x86_64__ || __arm__ || __arm64__ || __aarch64__ || __i386__
+#if __x86_64__ || __arm__ || __arm64__ || __aarch64__ || __i386__ || __POWERPC__
             // There's a bit of fuzziness here as the current frame won't start
             // exactly at the beginning of the stack---but should be good
             // enough.
@@ -290,7 +290,7 @@
     // The direction in which the stack grows is platform-specific. It's
     // probably gong to be growing downwards pretty much everywhere, but to be
     // safe we whitelist platforms that we have confirmed to do so.
-#if __x86_64__ || __arm__ || __arm64__ || __aarch64__ || __i386__
+#if __x86_64__ || __arm__ || __arm64__ || __aarch64__ || __i386__ || __POWERPC__
     auto* lower = reinterpret_cast<char*>(_fiber->regs.sp);
     auto* upper = reinterpret_cast<char*>(_fiber->regs.sp) + fiber_stack_used_size(_fiber);
 #else
@@ -309,7 +309,7 @@
     assert(::fiber_is_executing(_fiber)); // must be live
 
     // Whitelist architectures where we know how to do this.
-#if __x86_64__ || __arm__ || __arm64__ || __aarch64__ || __i386__
+#if __x86_64__ || __arm__ || __arm64__ || __aarch64__ || __i386__ || __POWERPC__
     // See
     // https://stackoverflow.com/questions/20059673/print-out-value-of-stack-pointer
     // for discussion of how to get stack pointer.
