From 27ad94571270043aeed7e8651c3608794dd90cdb Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Mon, 21 Jul 2025 01:58:54 +0800
Subject: [PATCH 20/31] java_md_macosx.c: fixes for ObjC code

---
 .../macosx/native/libjli/java_md_macosx.c     | 58 +++++++++++++------
 1 file changed, 39 insertions(+), 19 deletions(-)

diff --git a/jdk/src/java.base/macosx/native/libjli/java_md_macosx.c b/jdk/src/java.base/macosx/native/libjli/java_md_macosx.c
index 498d50449f..0afe31cb9c 100644
--- a/jdk/src/java.base/macosx/native/libjli/java_md_macosx.c
+++ b/jdk/src/java.base/macosx/native/libjli/java_md_macosx.c
@@ -293,8 +293,9 @@ static int (*main_fptr)(int argc, char **argv) = NULL;
  */
 static void *apple_main (void *arg)
 {
+#ifndef __POWERPC__
     objc_registerThreadWithCollector();
-
+#endif
     if (main_fptr == NULL) {
 #ifdef STATIC_BUILD
         extern int main(int argc, char **argv);
@@ -927,7 +928,9 @@ JLI_GetJavaVMInstance()
 void
 RegisterThread()
 {
+#ifndef __POWERPC__
     objc_registerThreadWithCollector();
+#endif
 }
 
 static void
@@ -1037,6 +1040,29 @@ SetXStartOnFirstThreadArg()
     setenv(envVar, "1", 1);
 }
 
+@interface JavaLaunchHelper : NSObject {
+    int _returnValue;
+}
+- (void) launchJava:(NSValue*)argsValue;
+- (int) getReturnValue;
+@end
+
+@implementation JavaLaunchHelper
+
+- (void) launchJava:(NSValue*)argsValue
+{
+    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
+    _returnValue = JavaMain([argsValue pointerValue]);
+    [pool drain];
+}
+
+- (int) getReturnValue
+{
+    return _returnValue;
+}
+
+@end
+
 // MacOSX we may continue in the same thread
 int
 JVMInit(InvocationFunctions* ifn, jlong threadStackSize,
@@ -1046,26 +1072,20 @@ JVMInit(InvocationFunctions* ifn, jlong threadStackSize,
         JLI_TraceLauncher("In same thread\n");
         // need to block this thread against the main thread
         // so signals get caught correctly
-        __block int rslt = 0;
+        JavaMainArgs args;
+        args.argc = argc;
+        args.argv = argv;
+        args.mode = mode;
+        args.what = what;
+        args.ifn  = *ifn;
+        int rslt;
         NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
         {
-            NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock: ^{
-                JavaMainArgs args;
-                args.argc = argc;
-                args.argv = argv;
-                args.mode = mode;
-                args.what = what;
-                args.ifn  = *ifn;
-                rslt = JavaMain(&args);
-            }];
-
-            /*
-             * We cannot use dispatch_sync here, because it blocks the main dispatch queue.
-             * Using the main NSRunLoop allows the dispatch queue to run properly once
-             * SWT (or whatever toolkit this is needed for) kicks off it's own NSRunLoop
-             * and starts running.
-             */
-            [op performSelectorOnMainThread:@selector(start) withObject:nil waitUntilDone:YES];
+            JavaLaunchHelper* launcher = [[[JavaLaunchHelper alloc] init] autorelease];
+            [launcher performSelectorOnMainThread:@selector(launchJava:)
+                                       withObject:[NSValue valueWithPointer:(void*)&args]
+                                    waitUntilDone:YES];
+            rslt = [launcher getReturnValue];
         }
         [pool drain];
         return rslt;
-- 
2.24.3 (Apple Git-128)

