From 6c76ea9be83706ae4b84e4704360c8118e91dd93 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Sun, 20 Jul 2025 23:49:27 +0800
Subject: [PATCH 10/31] os_bsd.cpp: fix running VM

---
 hotspot/src/os/bsd/vm/os_bsd.cpp | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/hotspot/src/os/bsd/vm/os_bsd.cpp b/hotspot/src/os/bsd/vm/os_bsd.cpp
index bd3ac41d8c..cf4055d6a7 100644
--- a/hotspot/src/os/bsd/vm/os_bsd.cpp
+++ b/hotspot/src/os/bsd/vm/os_bsd.cpp
@@ -654,7 +654,7 @@ void os::Bsd::hotspot_sigmask(Thread* thread) {
 //////////////////////////////////////////////////////////////////////////////
 // create new thread
 
-#ifdef __APPLE__
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)
 // library handle for calling objc_registerThreadWithCollector()
 // without static linking to the libobjc library
   #define OBJC_LIB "/usr/lib/libobjc.dylib"
@@ -664,7 +664,7 @@ extern "C" objc_registerThreadWithCollector_t objc_registerThreadWithCollectorFu
 objc_registerThreadWithCollector_t objc_registerThreadWithCollectorFunction = NULL;
 #endif
 
-#ifdef __APPLE__
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)
 static uint64_t locate_unique_thread_id(mach_port_t mach_thread_port) {
   // Additional thread_id used to correlate threads in SA
   thread_identifier_info_data_t     m_ident_info;
@@ -698,7 +698,7 @@ static void *thread_native_entry(Thread *thread) {
   log_info(os, thread)("Thread is alive (tid: " UINTX_FORMAT ", pthread id: " UINTX_FORMAT ").",
     os::current_thread_id(), (uintx) pthread_self());
 
-#ifdef __APPLE__
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)
   uint64_t unique_thread_id = locate_unique_thread_id(osthread->thread_id());
   guarantee(unique_thread_id != 0, "unique thread id was not found");
   osthread->set_unique_thread_id(unique_thread_id);
@@ -709,7 +709,7 @@ static void *thread_native_entry(Thread *thread) {
   // initialize floating point control register
   os::Bsd::init_thread_fpu_state();
 
-#ifdef __APPLE__
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)
   // register thread with objc gc
   if (objc_registerThreadWithCollectorFunction != NULL) {
     objc_registerThreadWithCollectorFunction();
@@ -850,7 +850,7 @@ bool os::create_attached_thread(JavaThread* thread) {
   osthread->set_thread_id(os::Bsd::gettid());
 
   // Store pthread info into the OSThread
-#ifdef __APPLE__
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)
   uint64_t unique_thread_id = locate_unique_thread_id(osthread->thread_id());
   guarantee(unique_thread_id != 0, "just checking");
   osthread->set_unique_thread_id(unique_thread_id);
@@ -3543,7 +3543,7 @@ jint os::init_2(void) {
   // initialize thread priority policy
   prio_init();
 
-#ifdef __APPLE__
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)
   // dynamically link to objective c gc registration
   void *handleLibObjc = dlopen(OBJC_LIB, RTLD_LAZY);
   if (handleLibObjc != NULL) {
@@ -3573,7 +3573,7 @@ int os::active_processor_count() {
 }
 
 void os::set_native_thread_name(const char *name) {
-#if defined(__APPLE__) && MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_5
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1050)
   // This is only supported in Snow Leopard and beyond
   if (name != NULL) {
     // Add a "Java: " prefix to the name
-- 
2.24.3 (Apple Git-128)

