# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           conflicts_build 1.0
PortGroup           github 1.0

set major           9
set real_name       openjdk${major}
name                ${real_name}-bootstrap
set update          181
github.setup        openjdk jdk${major}u ${major}+${update} jdk-
version             ${major}u${update}
revision            0
categories          java lang devel
license             GPL-2+
maintainers         {@barracuda156 gmail.com:vital.had}
description         OpenJDK ${major} port
long_description    {*}${description}. This port is to be used only for bootstrap purposes.
checksums           rmd160  eb19be7501df4e8aceb7a9d122eb3391103da84e \
                    sha256  a80c59433d394b241ebcd36968ec6ff017fab3fdf3700a459a5b59e978dab396 \
                    size    110113042
github.tarball_from archive

patch.pre_args-replace  -p0 -p1

patchfiles          0001-CoreLibraries.gmk-do-not-hardcode-arch.patch \
                    0002-os_bsd_zero.cpp-implement-sync_val_compare_and_swap_.patch \
                    0003-os_bsd-add-missing-arm64-and-ppc64-cases.patch \
                    0004-jniTypes_ppc.hpp-downgrade-error-to-warning-for-ppc3.patch \
                    0005-os_bsd.cpp-fix-vm_statistics.patch \
                    0006-Awt2dLibraries-add-fnested-functions.patch \
                    0007-java_md_macosx.c-define-preferredJVM.patch \
                    0008-os_bsd.cpp-do-not-deliberately-break-headless-build.patch \
                    0009-toolchain.m4-hack-around-a-broken-Xcode-version-dete.patch \
                    0010-os_bsd.cpp-fix-running-VM.patch \
                    0011-portconfig.c-fix-broken-pipe.patch \
                    0012-GenerateCurrencyData.java-fix-timebomb-bug.patch \
                    0013-Add-zero-jvm.cfg-for-macOS.patch \
                    0014-8181503-Can-t-compile-hotspot-with-C-11.patch \
                    0015-Define-__private_extern__-if-undefined.patch \
                    0016-Do-not-link-to-non-existing-native-Java-frameworks.patch \
                    0017-os_bsd.cpp-do-not-use-set_native_thread_name-on-ppc-.patch \
                    0018-MacBundles.gmk-bundles-for-10.7.patch \
                    0019-LibosxLibraries.gmk-PlatformLibraries.gmk-disable-so.patch \
                    0020-java_md_macosx.c-fixes-for-ObjC-code.patch \
                    0021-Fix-some-incorrect-hardcoded-cflags.patch \
                    0022-PLATFORM_API_MacOSX_PCM.cpp-unbreak-for-legacy-OS.patch \
                    0023-AWTFont.m-skip-JNF_COCOA_ENTER-stuff.patch \
                    0024-jawt.c-no-AWT-libs-on-powerpc.patch \
                    0025-fontpath.c-minor-fixes-for-powerpc.patch \
                    0026-awt_LoadLibrary.c-fix-for-powerpc-case.patch \
                    0027-HeadlessToolkit.c-minor-fix.patch \
                    0028-CUPSfuncs.c-hack-this-to-work.patch \
                    0029-AccelGlyphCache.c-no-dTrace.patch \
                    0030-IPV6_TCLASS-define-if-undefined.patch \
                    0031-Awt2dLibraries.gmk-hacks-for-macOS-headless.patch

# Active libnet breaks linking of libnio which should link
# to JDKâ€™s own internal libnet.
# libjpeg-turbo: https://trac.macports.org/ticket/67123
conflicts_build     libjpeg-turbo libnet

set boot_v          8

depends_build-append \
                    port:autoconf \
                    port:automake \
                    port:bash \
                    port:gmake \
                    port:openjdk${boot_v} \
                    path:bin/pkg-config:pkgconfig

depends_lib-append  port:fontconfig \
                    port:freetype \
                    port:libffi \
                    port:libiconv \
                    port:xorg-libX11 \
                    port:xorg-libXext

set tpath           ${prefix}/Library/Java

use_xcode           yes

if {${configure.build_arch} in [list arm i386 ppc]} {
    set datamodel   32
} else {
    set datamodel   64
}

post-patch {
    set automake_dirs [glob -directory ${prefix}/share automake-*]
    set automake_dir [lindex [lsort -command vercmp $automake_dirs] end]
    copy -force ${automake_dir}/config.guess \
        ${worksrcpath}/common/autoconf/build-aux/autoconf-config.guess
    copy -force ${automake_dir}/config.sub \
        ${worksrcpath}/common/autoconf/build-aux/autoconf-config.sub

    # Fix targets:
    reinplace "s|MACOSX_VERSION_MIN=10.7.0|MACOSX_VERSION_MIN=${macosx_deployment_target}.0|g" \
            ${worksrcpath}/common/autoconf/flags.m4 \
            ${worksrcpath}/common/autoconf/generated-configure.sh
}

configure.cmd       ${prefix}/bin/bash ./configure
configure.pre_args  --prefix=${tpath}

set bug_url         "https://github.com/macos-powerpc/powerpc-ports/issues/new"

# Default configure args:
configure.args-append \
                    --disable-dtrace \
                    --disable-full-docs \
                    --disable-precompiled-headers \
                    --disable-warnings-as-errors \
                    --with-boot-jdk=${prefix}/Library/Java/JavaVirtualMachines/openjdk${boot_v} \
                    --with-conf-name=${real_name} \
                    --with-debug-level=release \
                    --with-extra-cflags="${configure.cflags}" \
                    --with-extra-cxxflags="${configure.cxxflags}" \
                    --with-extra-ldflags="${configure.ldflags}" \
                    --with-freetype-include=${prefix}/include/freetype2 \
                    --with-freetype-lib=${prefix}/lib \
                    --with-native-debug-symbols=none \
                    --with-target-bits=${datamodel} \
                    --with-update-version=${update} \
                    --with-vendor-bug-url="${bug_url}" \
                    --with-vendor-name="MacOS PowerPC" \
                    --with-vendor-url="https://macos-powerpc.org" \
                    --with-vendor-vm-bug-url="${bug_url}"

# See notes below.
configure.args-append \
                    --with-num-cores=${buildmakejobs}

# https://chromium.googlesource.com/chromium/src/+/52.0.2743.117/docs/mac_build_instructions.md
# unable to execute command: posix_spawn failed: Resource temporarily unavailable
# https://github.com/nilsvanvelzen/mac_ppc_openjdk8u60/issues/2
pre-fetch {
    ui_msg "Consider running \`sudo sysctl -w kern.maxproc=2500\` and \`sudo sysctl -w kern.maxprocperuid=2500\` before building"
}

# https://github.com/nilsvanvelzen/mac_ppc_openjdk8u60/commit/ea85e37ea7d7299007697afc3ca9ef2fd1fde2a9
# This error may occur, and there is no perfect solution. Requiring to build on a single core will
# dramatically increase build time, which is already long. A confirmed-to-work hack is to switch
# to a manual build in a case of a linkage failure: cd to extracted sources, sudo gmake + args used by MacPorts.
# Once the build completes, you can resume a standard MacPorts installation. There is no need to reconfigure,
# just run `sudo port build` or `sudo port install`.
pre-build {
    ui_msg "Linking may fail when building in parallel. In such a case use --with-num-cores=1"
}

if {[option configure.ccache]} {
    # replace MacPorts ccache integration into JDK
    configure.ccache        no
    depends_build-append    path:bin/ccache:ccache
    configure.args-append   --enable-ccache \
                            --with-ccache-dir=${ccache_dir}
}

if { [string match *clang* ${configure.compiler}] } {
    configure.args-append \
                    --with-toolchain-type=clang
} elseif { [string match *gcc* ${configure.compiler}] } {
    configure.args-append \
                    --with-toolchain-type=gcc
}

if {[string match macports-gcc* ${configure.compiler}]} {
    # Not needed for Xcode gcc. gcc14 converted
    # some warnings into errors by default, turn those off:
    configure.cflags-append \
                    -Wno-implicit-function-declaration \
                    -Wno-incompatible-pointer-types \
                    -Wno-int-conversion
}

build.cmd           ${prefix}/bin/gmake

variant release \
    conflicts debug \
    description "OpenJDK with no debug information, all optimizations and no asserts" {
    configure.args-append   --disable-debug
}

variant debug \
    conflicts release \
    description "OpenJDK with debug information, all optimizations and all asserts" {
    configure.args-append   --with-debug-level=fastdebug
    configure.args-delete   --disable-debug --with-native-debug-symbols=none
}

variant zero \
    description "JVM with no assembler, no machine code interpreter and no compiler" {
    if {${configure.build_arch} in [list ppc ppc64]} {
        configure.cflags-append     -DPPC${datamodel}
        configure.cxxflags-append   -DPPC${datamodel}
    }
    configure.args-append   --enable-headless-only \
                            --with-jvm-variants=zero \
                            --with-extra-cflags="${configure.cflags} -I${prefix}/include -arch ${configure.build_arch}" \
                            --with-extra-cxxflags="${configure.cxxflags} -arch ${configure.build_arch}" \
                            --with-extra-ldflags="${configure.ldflags} -I${prefix}/lib -arch ${configure.build_arch}"
    configure.args-delete   --with-extra-cflags="${configure.cflags}" \
                            --with-extra-cxxflags="${configure.cxxflags}" \
                            --with-extra-ldflags="${configure.ldflags}"
}

if {![variant_isset debug] && ![variant_isset release]} {
    default_variants-append +release
}

default_variants-append     +zero

build.type          gnu
build.target        images

use_parallel_build  no

set jdkn jdk1.${major}.0_${update}.jdk
set jren jre1.${major}.0_${update}.jre
set jdk_path ${tpath}/JavaVirtualMachines/${real_name}
set jre_path ${tpath}/JavaVirtualMachines/${real_name}-jre
set jvms /Library/Java/JavaVirtualMachines

# We do not build macOS-style bundles here, so paths differ:
set jdk_bundle_dir  build/openjdk${boot_v}/images/j2sdk-image
set jre_bundle_dir  build/openjdk${boot_v}/images/j2re-image

# But we want to install in a macOS-style:
destroot {
    xinstall -m 755 -d ${destroot}${jdk_path}/Contents
    xinstall -m 755 -d ${destroot}${jre_path}/Contents
    xinstall -m 755 -d ${destroot}${jvms}
    # This renames j2*-image dirs to respective Homes:
    move ${worksrcpath}/${jdk_bundle_dir} ${destroot}${jdk_path}/Contents/Home
    move ${worksrcpath}/${jre_bundle_dir} ${destroot}${jre_path}/Contents/Home

    # We need these:
    ln -s ${prefix}/lib/libfontconfig.1.dylib ${destroot}${jdk_path}/Contents/Home/jre/lib/libfontconfig.dylib
    ln -s ${prefix}/lib/libfontconfig.1.dylib ${destroot}${jre_path}/Contents/Home/lib/libfontconfig.dylib
}
# Binaries are gone from worksrcpath, so run from destroot:
test.cmd            ${destroot}${jdk_path}/Contents/Home/bin/java

test.run            yes
test.target         -version

post-destroot {
    delete ${worksrcpath}
}

notes "
This port should only be used to bootstrap a later JDK. Avoid it otherwise.
"

# EOL
livecheck.type      none
