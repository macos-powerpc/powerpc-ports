From 62a432575de7163bf58a0d7bdcf997b51096c92b Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 25 Oct 2025 14:20:29 +0800
Subject: [PATCH 4/4] Revert "Introduce compile-time switch between `const
 std::string&` and `absl::string_view` arguments of virtual
 `DescriptorDatabase` methods."

This reverts commit acf5350bce9764163c6444458bf26f270c011b63.
---
 src/google/protobuf/descriptor_database.cc | 64 ++++++++----------
 src/google/protobuf/descriptor_database.h  | 77 ++++++++--------------
 src/google/protobuf/port_def.inc           | 13 ----
 src/google/protobuf/port_undef.inc         |  1 -
 4 files changed, 56 insertions(+), 99 deletions(-)

diff --git a/src/google/protobuf/descriptor_database.cc b/src/google/protobuf/descriptor_database.cc
index ff18ca694..733c9210c 100644
--- a/src/google/protobuf/descriptor_database.cc
+++ b/src/google/protobuf/descriptor_database.cc
@@ -12,28 +12,18 @@
 #include "google/protobuf/descriptor_database.h"
 
 #include <algorithm>
-#include <cassert>
-#include <cstddef>
 #include <cstdint>
-#include <cstring>
-#include <memory>
 #include <string>
-#include <tuple>
 #include <utility>
 #include <vector>
 
 #include "absl/container/btree_set.h"
-#include "absl/log/absl_check.h"
-#include "absl/log/absl_log.h"
 #include "absl/strings/ascii.h"
 #include "absl/strings/match.h"
-#include "absl/strings/str_cat.h"
 #include "absl/strings/str_replace.h"
 #include "absl/strings/string_view.h"
 #include "google/protobuf/descriptor.pb.h"
-#include "google/protobuf/io/coded_stream.h"
 #include "google/protobuf/parse_context.h"
-#include "google/protobuf/wire_format_lite.h"
 
 
 namespace google {
@@ -246,7 +236,8 @@ bool SimpleDescriptorDatabase::DescriptorIndex<Value>::AddSymbol(
 
 template <typename Value>
 bool SimpleDescriptorDatabase::DescriptorIndex<Value>::AddNestedExtensions(
-    StringViewArg filename, const DescriptorProto& message_type, Value value) {
+    const std::string& filename, const DescriptorProto& message_type,
+    Value value) {
   for (int i = 0; i < message_type.nested_type_size(); i++) {
     if (!AddNestedExtensions(filename, message_type.nested_type(i), value))
       return false;
@@ -259,7 +250,8 @@ bool SimpleDescriptorDatabase::DescriptorIndex<Value>::AddNestedExtensions(
 
 template <typename Value>
 bool SimpleDescriptorDatabase::DescriptorIndex<Value>::AddExtension(
-    StringViewArg filename, const FieldDescriptorProto& field, Value value) {
+    const std::string& filename, const FieldDescriptorProto& field,
+    Value value) {
   if (!field.extendee().empty() && field.extendee()[0] == '.') {
     // The extension is fully-qualified.  We can use it as a lookup key in
     // the by_symbol_ table.
@@ -285,7 +277,7 @@ bool SimpleDescriptorDatabase::DescriptorIndex<Value>::AddExtension(
 
 template <typename Value>
 Value SimpleDescriptorDatabase::DescriptorIndex<Value>::FindFile(
-    StringViewArg filename) {
+    const std::string& filename) {
   auto it = by_name_.find(filename);
   if (it == by_name_.end()) return {};
   return it->second;
@@ -293,7 +285,7 @@ Value SimpleDescriptorDatabase::DescriptorIndex<Value>::FindFile(
 
 template <typename Value>
 Value SimpleDescriptorDatabase::DescriptorIndex<Value>::FindSymbol(
-    StringViewArg name) {
+    const std::string& name) {
   auto iter = FindLastLessOrEqual(&by_symbol_, name);
 
   return (iter != by_symbol_.end() && IsSubSymbol(iter->first, name))
@@ -303,18 +295,16 @@ Value SimpleDescriptorDatabase::DescriptorIndex<Value>::FindSymbol(
 
 template <typename Value>
 Value SimpleDescriptorDatabase::DescriptorIndex<Value>::FindExtension(
-    StringViewArg containing_type, int field_number) {
-  auto it = by_extension_.find(
-      std::make_pair(std::string(containing_type), field_number));
+    const std::string& containing_type, int field_number) {
+  auto it = by_extension_.find({containing_type, field_number});
   if (it == by_extension_.end()) return {};
   return it->second;
 }
 
 template <typename Value>
 bool SimpleDescriptorDatabase::DescriptorIndex<Value>::FindAllExtensionNumbers(
-    StringViewArg containing_type, std::vector<int>* output) {
-  auto it = by_extension_.lower_bound(
-      std::make_pair(std::string(containing_type), 0));
+    const std::string& containing_type, std::vector<int>* output) {
+  auto it = by_extension_.lower_bound(std::make_pair(containing_type, 0));
   bool success = false;
 
   for (; it != by_extension_.end() && it->first.first == containing_type;
@@ -354,24 +344,24 @@ bool SimpleDescriptorDatabase::AddUnowned(const FileDescriptorProto* file) {
   return index_.AddFile(*file, file);
 }
 
-bool SimpleDescriptorDatabase::FindFileByName(StringViewArg filename,
+bool SimpleDescriptorDatabase::FindFileByName(const std::string& filename,
                                               FileDescriptorProto* output) {
   return MaybeCopy(index_.FindFile(filename), output);
 }
 
 bool SimpleDescriptorDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* output) {
+    const std::string& symbol_name, FileDescriptorProto* output) {
   return MaybeCopy(index_.FindSymbol(symbol_name), output);
 }
 
 bool SimpleDescriptorDatabase::FindFileContainingExtension(
-    StringViewArg containing_type, int field_number,
+    const std::string& containing_type, int field_number,
     FileDescriptorProto* output) {
   return MaybeCopy(index_.FindExtension(containing_type, field_number), output);
 }
 
 bool SimpleDescriptorDatabase::FindAllExtensionNumbers(
-    StringViewArg extendee_type, std::vector<int>* output) {
+    const std::string& extendee_type, std::vector<int>* output) {
   return index_.FindAllExtensionNumbers(extendee_type, output);
 }
 
@@ -573,18 +563,18 @@ bool EncodedDescriptorDatabase::AddCopy(const void* encoded_file_descriptor,
   return Add(copy, size);
 }
 
-bool EncodedDescriptorDatabase::FindFileByName(StringViewArg filename,
+bool EncodedDescriptorDatabase::FindFileByName(const std::string& filename,
                                                FileDescriptorProto* output) {
   return MaybeParse(index_->FindFile(filename), output);
 }
 
 bool EncodedDescriptorDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* output) {
+    const std::string& symbol_name, FileDescriptorProto* output) {
   return MaybeParse(index_->FindSymbol(symbol_name), output);
 }
 
 bool EncodedDescriptorDatabase::FindNameOfFileContainingSymbol(
-    StringViewArg symbol_name, std::string* output) {
+    const std::string& symbol_name, std::string* output) {
   auto encoded_file = index_->FindSymbol(symbol_name);
   if (encoded_file.first == nullptr) return false;
 
@@ -612,14 +602,14 @@ bool EncodedDescriptorDatabase::FindNameOfFileContainingSymbol(
 }
 
 bool EncodedDescriptorDatabase::FindFileContainingExtension(
-    StringViewArg containing_type, int field_number,
+    const std::string& containing_type, int field_number,
     FileDescriptorProto* output) {
   return MaybeParse(index_->FindExtension(containing_type, field_number),
                     output);
 }
 
 bool EncodedDescriptorDatabase::FindAllExtensionNumbers(
-    StringViewArg extendee_type, std::vector<int>* output) {
+    const std::string& extendee_type, std::vector<int>* output) {
   return index_->FindAllExtensionNumbers(extendee_type, output);
 }
 
@@ -898,7 +888,7 @@ DescriptorPoolDatabase::DescriptorPoolDatabase(
     : pool_(pool), options_(std::move(options)) {}
 DescriptorPoolDatabase::~DescriptorPoolDatabase() {}
 
-bool DescriptorPoolDatabase::FindFileByName(StringViewArg filename,
+bool DescriptorPoolDatabase::FindFileByName(const std::string& filename,
                                             FileDescriptorProto* output) {
   const FileDescriptor* file = pool_.FindFileByName(filename);
   if (file == nullptr) return false;
@@ -911,7 +901,7 @@ bool DescriptorPoolDatabase::FindFileByName(StringViewArg filename,
 }
 
 bool DescriptorPoolDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* output) {
+    const std::string& symbol_name, FileDescriptorProto* output) {
   const FileDescriptor* file = pool_.FindFileContainingSymbol(symbol_name);
   if (file == nullptr) return false;
   output->Clear();
@@ -923,7 +913,7 @@ bool DescriptorPoolDatabase::FindFileContainingSymbol(
 }
 
 bool DescriptorPoolDatabase::FindFileContainingExtension(
-    StringViewArg containing_type, int field_number,
+    const std::string& containing_type, int field_number,
     FileDescriptorProto* output) {
   const Descriptor* extendee = pool_.FindMessageTypeByName(containing_type);
   if (extendee == nullptr) return false;
@@ -941,7 +931,7 @@ bool DescriptorPoolDatabase::FindFileContainingExtension(
 }
 
 bool DescriptorPoolDatabase::FindAllExtensionNumbers(
-    StringViewArg extendee_type, std::vector<int>* output) {
+    const std::string& extendee_type, std::vector<int>* output) {
   const Descriptor* extendee = pool_.FindMessageTypeByName(extendee_type);
   if (extendee == nullptr) return false;
 
@@ -967,7 +957,7 @@ MergedDescriptorDatabase::MergedDescriptorDatabase(
     : sources_(sources) {}
 MergedDescriptorDatabase::~MergedDescriptorDatabase() {}
 
-bool MergedDescriptorDatabase::FindFileByName(StringViewArg filename,
+bool MergedDescriptorDatabase::FindFileByName(const std::string& filename,
                                               FileDescriptorProto* output) {
   for (DescriptorDatabase* source : sources_) {
     if (source->FindFileByName(filename, output)) {
@@ -978,7 +968,7 @@ bool MergedDescriptorDatabase::FindFileByName(StringViewArg filename,
 }
 
 bool MergedDescriptorDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* output) {
+    const std::string& symbol_name, FileDescriptorProto* output) {
   for (size_t i = 0; i < sources_.size(); i++) {
     if (sources_[i]->FindFileContainingSymbol(symbol_name, output)) {
       // The symbol was found in source i.  However, if one of the previous
@@ -999,7 +989,7 @@ bool MergedDescriptorDatabase::FindFileContainingSymbol(
 }
 
 bool MergedDescriptorDatabase::FindFileContainingExtension(
-    StringViewArg containing_type, int field_number,
+    const std::string& containing_type, int field_number,
     FileDescriptorProto* output) {
   for (size_t i = 0; i < sources_.size(); i++) {
     if (sources_[i]->FindFileContainingExtension(containing_type, field_number,
@@ -1022,7 +1012,7 @@ bool MergedDescriptorDatabase::FindFileContainingExtension(
 }
 
 bool MergedDescriptorDatabase::FindAllExtensionNumbers(
-    StringViewArg extendee_type, std::vector<int>* output) {
+    const std::string& extendee_type, std::vector<int>* output) {
   // NOLINTNEXTLINE(google3-runtime-rename-unnecessary-ordering)
   absl::btree_set<int> merged_results;
   std::vector<int> results;
diff --git a/src/google/protobuf/descriptor_database.h b/src/google/protobuf/descriptor_database.h
index f3c7a4e05..dbc400d94 100644
--- a/src/google/protobuf/descriptor_database.h
+++ b/src/google/protobuf/descriptor_database.h
@@ -14,15 +14,13 @@
 #ifndef GOOGLE_PROTOBUF_DESCRIPTOR_DATABASE_H__
 #define GOOGLE_PROTOBUF_DESCRIPTOR_DATABASE_H__
 
-#include <memory>
 #include <string>
-#include <type_traits>
 #include <utility>
 #include <vector>
 
 #include "absl/container/btree_map.h"
-#include "absl/strings/string_view.h"
 #include "google/protobuf/descriptor.h"
+#include "google/protobuf/port.h"
 
 // Must be included last.
 #include "google/protobuf/port_def.inc"
@@ -50,17 +48,6 @@ class MergedDescriptorDatabase;
 // can be created which wraps a DescriptorDatabase and only builds particular
 // descriptors when they are needed.
 class PROTOBUF_EXPORT DescriptorDatabase {
- protected:
-  // Alias to enable the migration from const std::string& to absl::string_view
-  // in virtual methods. Controlled by
-  // PROTOBUF_FUTURE_STRING_VIEW_DESCRIPTOR_DATABASE to allow a global switch
-  // when ready for consistent transition.
-#ifdef PROTOBUF_FUTURE_STRING_VIEW_DESCRIPTOR_DATABASE
-  using StringViewArg = absl::string_view;
-#else
-  using StringViewArg = const std::string&;
-#endif
-
  public:
   inline DescriptorDatabase() {}
   DescriptorDatabase(const DescriptorDatabase&) = delete;
@@ -69,20 +56,20 @@ class PROTOBUF_EXPORT DescriptorDatabase {
 
   // Find a file by file name.  Fills in in *output and returns true if found.
   // Otherwise, returns false, leaving the contents of *output undefined.
-  virtual bool FindFileByName(StringViewArg filename,
+  virtual bool FindFileByName(const std::string& filename,
                               FileDescriptorProto* output) = 0;
 
   // Find the file that declares the given fully-qualified symbol name.
   // If found, fills in *output and returns true, otherwise returns false
   // and leaves *output undefined.
-  virtual bool FindFileContainingSymbol(StringViewArg symbol_name,
+  virtual bool FindFileContainingSymbol(const std::string& symbol_name,
                                         FileDescriptorProto* output) = 0;
 
   // Find the file which defines an extension extending the given message type
   // with the given field number.  If found, fills in *output and returns true,
   // otherwise returns false and leaves *output undefined.  containing_type
   // must be a fully-qualified type name.
-  virtual bool FindFileContainingExtension(StringViewArg containing_type,
+  virtual bool FindFileContainingExtension(const std::string& containing_type,
                                            int field_number,
                                            FileDescriptorProto* output) = 0;
 
@@ -96,7 +83,7 @@ class PROTOBUF_EXPORT DescriptorDatabase {
   //
   // This method has a default implementation that always returns
   // false.
-  virtual bool FindAllExtensionNumbers(StringViewArg /* extendee_type */,
+  virtual bool FindAllExtensionNumbers(const std::string& /* extendee_type */,
                                        std::vector<int>* /* output */) {
     return false;
   }
@@ -127,12 +114,6 @@ class PROTOBUF_EXPORT DescriptorDatabase {
   // searching all message names, otherwise returns false and leaves output
   // unchanged.
   bool FindAllMessageNames(std::vector<std::string>* output);
-
- private:
-  static_assert(std::is_same<StringViewArg, absl::string_view>::value ||
-                    std::is_same<StringViewArg, const std::string&>::value,
-                "StringViewArg must be either "
-                "absl::string_view or const std::string&");
 };
 
 // A DescriptorDatabase into which you can insert files manually.
@@ -177,14 +158,14 @@ class PROTOBUF_EXPORT SimpleDescriptorDatabase : public DescriptorDatabase {
   bool AddUnowned(const FileDescriptorProto* file);
 
   // implements DescriptorDatabase -----------------------------------
-  bool FindFileByName(StringViewArg filename,
+  bool FindFileByName(const std::string& filename,
                       FileDescriptorProto* output) override;
-  bool FindFileContainingSymbol(StringViewArg symbol_name,
+  bool FindFileContainingSymbol(const std::string& symbol_name,
                                 FileDescriptorProto* output) override;
-  bool FindFileContainingExtension(StringViewArg containing_type,
+  bool FindFileContainingExtension(const std::string& containing_type,
                                    int field_number,
                                    FileDescriptorProto* output) override;
-  bool FindAllExtensionNumbers(StringViewArg extendee_type,
+  bool FindAllExtensionNumbers(const std::string& extendee_type,
                                std::vector<int>* output) override;
 
   bool FindAllFileNames(std::vector<std::string>* output) override;
@@ -199,15 +180,15 @@ class PROTOBUF_EXPORT SimpleDescriptorDatabase : public DescriptorDatabase {
     // to the index.
     bool AddFile(const FileDescriptorProto& file, Value value);
     bool AddSymbol(absl::string_view name, Value value);
-    bool AddNestedExtensions(StringViewArg filename,
+    bool AddNestedExtensions(const std::string& filename,
                              const DescriptorProto& message_type, Value value);
-    bool AddExtension(StringViewArg filename, const FieldDescriptorProto& field,
-                      Value value);
+    bool AddExtension(const std::string& filename,
+                      const FieldDescriptorProto& field, Value value);
 
-    Value FindFile(StringViewArg filename);
-    Value FindSymbol(StringViewArg name);
-    Value FindExtension(StringViewArg containing_type, int field_number);
-    bool FindAllExtensionNumbers(StringViewArg containing_type,
+    Value FindFile(const std::string& filename);
+    Value FindSymbol(const std::string& name);
+    Value FindExtension(const std::string& containing_type, int field_number);
+    bool FindAllExtensionNumbers(const std::string& containing_type,
                                  std::vector<int>* output);
     void FindAllFileNames(std::vector<std::string>* output);
 
@@ -302,18 +283,18 @@ class PROTOBUF_EXPORT EncodedDescriptorDatabase : public DescriptorDatabase {
   bool AddCopy(const void* encoded_file_descriptor, int size);
 
   // Like FindFileContainingSymbol but returns only the name of the file.
-  bool FindNameOfFileContainingSymbol(StringViewArg symbol_name,
+  bool FindNameOfFileContainingSymbol(const std::string& symbol_name,
                                       std::string* output);
 
   // implements DescriptorDatabase -----------------------------------
-  bool FindFileByName(StringViewArg filename,
+  bool FindFileByName(const std::string& filename,
                       FileDescriptorProto* output) override;
-  bool FindFileContainingSymbol(StringViewArg symbol_name,
+  bool FindFileContainingSymbol(const std::string& symbol_name,
                                 FileDescriptorProto* output) override;
-  bool FindFileContainingExtension(StringViewArg containing_type,
+  bool FindFileContainingExtension(const std::string& containing_type,
                                    int field_number,
                                    FileDescriptorProto* output) override;
-  bool FindAllExtensionNumbers(StringViewArg extendee_type,
+  bool FindAllExtensionNumbers(const std::string& extendee_type,
                                std::vector<int>* output) override;
   bool FindAllFileNames(std::vector<std::string>* output) override;
 
@@ -346,14 +327,14 @@ class PROTOBUF_EXPORT DescriptorPoolDatabase : public DescriptorDatabase {
   ~DescriptorPoolDatabase() override;
 
   // implements DescriptorDatabase -----------------------------------
-  bool FindFileByName(StringViewArg filename,
+  bool FindFileByName(const std::string& filename,
                       FileDescriptorProto* output) override;
-  bool FindFileContainingSymbol(StringViewArg symbol_name,
+  bool FindFileContainingSymbol(const std::string& symbol_name,
                                 FileDescriptorProto* output) override;
-  bool FindFileContainingExtension(StringViewArg containing_type,
+  bool FindFileContainingExtension(const std::string& containing_type,
                                    int field_number,
                                    FileDescriptorProto* output) override;
-  bool FindAllExtensionNumbers(StringViewArg extendee_type,
+  bool FindAllExtensionNumbers(const std::string& extendee_type,
                                std::vector<int>* output) override;
 
  private:
@@ -378,16 +359,16 @@ class PROTOBUF_EXPORT MergedDescriptorDatabase : public DescriptorDatabase {
   ~MergedDescriptorDatabase() override;
 
   // implements DescriptorDatabase -----------------------------------
-  bool FindFileByName(StringViewArg filename,
+  bool FindFileByName(const std::string& filename,
                       FileDescriptorProto* output) override;
-  bool FindFileContainingSymbol(StringViewArg symbol_name,
+  bool FindFileContainingSymbol(const std::string& symbol_name,
                                 FileDescriptorProto* output) override;
-  bool FindFileContainingExtension(StringViewArg containing_type,
+  bool FindFileContainingExtension(const std::string& containing_type,
                                    int field_number,
                                    FileDescriptorProto* output) override;
   // Merges the results of calling all databases. Returns true iff any
   // of the databases returned true.
-  bool FindAllExtensionNumbers(StringViewArg extendee_type,
+  bool FindAllExtensionNumbers(const std::string& extendee_type,
                                std::vector<int>* output) override;
 
 
diff --git a/src/google/protobuf/port_def.inc b/src/google/protobuf/port_def.inc
index b3b9cb187..559502ac0 100644
--- a/src/google/protobuf/port_def.inc
+++ b/src/google/protobuf/port_def.inc
@@ -179,19 +179,6 @@ static_assert(PROTOBUF_ABSL_MIN(20230125, 3),
 
 #endif
 
-// Introducing a future-breaking change guard for descriptor database migration.
-// This allows google3 to transition to absl::string_view while keeping OSS
-// on std::string until the migration is fully completed.
-// The temporary macro enables incremental migration before permanently flipping
-// the switch.
-#ifdef PROTOBUF_FUTURE_STRING_VIEW_DESCRIPTOR_DATABASE
-#error PROTOBUF_FUTURE_STRING_VIEW_DESCRIPTOR_DATABASE was previously defined
-#endif
-
-#if defined(PROTOBUF_TEMPORARY_ENABLE_STRING_VIEW_DESCRIPTOR_DATABASE)
-#define PROTOBUF_FUTURE_STRING_VIEW_DESCRIPTOR_DATABASE 1
-#endif
-
 #ifdef PROTOBUF_ALWAYS_INLINE
 #error PROTOBUF_ALWAYS_INLINE was previously defined
 #endif
diff --git a/src/google/protobuf/port_undef.inc b/src/google/protobuf/port_undef.inc
index 270180a13..b5f8c3bb2 100644
--- a/src/google/protobuf/port_undef.inc
+++ b/src/google/protobuf/port_undef.inc
@@ -66,7 +66,6 @@
 #undef PROTOBUF_NO_THREADLOCAL
 #undef PROTOBUF_NONNULL
 #undef PROTOBUF_NULLABLE
-#undef PROTOBUF_FUTURE_STRING_VIEW_DESCRIPTOR_DATABASE
 #undef PROTOBUF_PRESERVE_ALL
 
 #ifdef PROTOBUF_FUTURE_BREAKING_CHANGES
-- 
2.51.0

