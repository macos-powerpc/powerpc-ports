From 6920cf91137990b6766080389038af5d1b5d704e Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 25 Oct 2025 14:08:43 +0800
Subject: [PATCH 1/4] Revert "Reduce cost of symbol lookup."

This reverts commit f494a97456e95c0e5116197651047bd055e3fc85.
---
 src/google/protobuf/descriptor_database.cc | 25 ++++++----------------
 1 file changed, 7 insertions(+), 18 deletions(-)

diff --git a/src/google/protobuf/descriptor_database.cc b/src/google/protobuf/descriptor_database.cc
index fb77f5778..5d1e7c081 100644
--- a/src/google/protobuf/descriptor_database.cc
+++ b/src/google/protobuf/descriptor_database.cc
@@ -513,6 +513,7 @@ class EncodedDescriptorDatabase::DescriptorIndex {
     std::string AsString(const SymbolEntry& entry) const {
       return entry.AsString(index);
     }
+    static absl::string_view AsString(absl::string_view str) { return str; }
 
     std::pair<absl::string_view, absl::string_view> GetParts(
         const SymbolEntry& entry) const {
@@ -520,8 +521,13 @@ class EncodedDescriptorDatabase::DescriptorIndex {
       if (package.empty()) return {entry.symbol(index), absl::string_view{}};
       return {package, entry.symbol(index)};
     }
+    std::pair<absl::string_view, absl::string_view> GetParts(
+        absl::string_view str) const {
+      return {str, {}};
+    }
 
-    bool operator()(const SymbolEntry& lhs, const SymbolEntry& rhs) const {
+    template <typename T, typename U>
+    bool operator()(const T& lhs, const U& rhs) const {
       auto lhs_parts = GetParts(lhs);
       auto rhs_parts = GetParts(rhs);
 
@@ -536,23 +542,6 @@ class EncodedDescriptorDatabase::DescriptorIndex {
       }
       return AsString(lhs) < AsString(rhs);
     }
-
-    bool operator()(absl::string_view lhs, const SymbolEntry& rhs) const {
-      auto p = rhs.package(index);
-      if (!p.empty()) {
-        absl::string_view lhs_part = lhs.substr(0, p.size());
-        lhs.remove_prefix(lhs_part.size());
-        if (int res = lhs_part.compare(p); res != 0) return res < 0;
-        // If compare returned 0 is because we consumed all of `p` and it
-        // matched.
-
-        // Compare the implicit `.`
-        if (lhs.empty() || lhs[0] < '.') return true;
-        if (lhs[0] > '.') return false;
-        lhs.remove_prefix(1);
-      }
-      return lhs < rhs.symbol(index);
-    }
   };
   absl::btree_set<SymbolEntry, SymbolCompare> by_symbol_{SymbolCompare{*this}};
   std::vector<SymbolEntry> by_symbol_flat_;
-- 
2.51.0

