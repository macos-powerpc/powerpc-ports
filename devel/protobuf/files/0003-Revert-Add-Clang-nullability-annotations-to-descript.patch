From dca01c250b9e50a39b81a3023ece130c5a04716c Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 25 Oct 2025 14:09:58 +0800
Subject: [PATCH 3/4] Revert "Add Clang nullability annotations to
 descriptor_database.h APIs"

This reverts commit 76fae675cfa50b623ad6c72b5a571901db44b387.
---
 src/google/protobuf/descriptor_database.cc |  85 +++++++---------
 src/google/protobuf/descriptor_database.h  | 113 +++++++++------------
 2 files changed, 85 insertions(+), 113 deletions(-)

diff --git a/src/google/protobuf/descriptor_database.cc b/src/google/protobuf/descriptor_database.cc
index 40813d1c8..ff18ca694 100644
--- a/src/google/protobuf/descriptor_database.cc
+++ b/src/google/protobuf/descriptor_database.cc
@@ -36,9 +36,6 @@
 #include "google/protobuf/wire_format_lite.h"
 
 
-// Must be included last.
-#include "google/protobuf/port_def.inc"
-
 namespace google {
 namespace protobuf {
 
@@ -88,8 +85,7 @@ bool ForAllFileProtos(DescriptorDatabase* db, Fn callback,
 
 DescriptorDatabase::~DescriptorDatabase() = default;
 
-bool DescriptorDatabase::FindAllPackageNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) {
+bool DescriptorDatabase::FindAllPackageNames(std::vector<std::string>* output) {
   return ForAllFileProtos(
       this,
       [](const FileDescriptorProto& file_proto,
@@ -99,8 +95,7 @@ bool DescriptorDatabase::FindAllPackageNames(
       output);
 }
 
-bool DescriptorDatabase::FindAllMessageNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) {
+bool DescriptorDatabase::FindAllMessageNames(std::vector<std::string>* output) {
   return ForAllFileProtos(
       this,
       [](const FileDescriptorProto& file_proto,
@@ -317,7 +312,7 @@ Value SimpleDescriptorDatabase::DescriptorIndex<Value>::FindExtension(
 
 template <typename Value>
 bool SimpleDescriptorDatabase::DescriptorIndex<Value>::FindAllExtensionNumbers(
-    StringViewArg containing_type, std::vector<int>* PROTOBUF_NONNULL output) {
+    StringViewArg containing_type, std::vector<int>* output) {
   auto it = by_extension_.lower_bound(
       std::make_pair(std::string(containing_type), 0));
   bool success = false;
@@ -333,7 +328,7 @@ bool SimpleDescriptorDatabase::DescriptorIndex<Value>::FindAllExtensionNumbers(
 
 template <typename Value>
 void SimpleDescriptorDatabase::DescriptorIndex<Value>::FindAllFileNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) {
+    std::vector<std::string>* output) {
   output->resize(by_name_.size());
   int i = 0;
   for (const auto& kv : by_name_) {
@@ -350,30 +345,28 @@ bool SimpleDescriptorDatabase::Add(const FileDescriptorProto& file) {
   return AddAndOwn(new_file);
 }
 
-bool SimpleDescriptorDatabase::AddAndOwn(
-    const FileDescriptorProto* PROTOBUF_NONNULL file) {
+bool SimpleDescriptorDatabase::AddAndOwn(const FileDescriptorProto* file) {
   files_to_delete_.emplace_back(file);
   return index_.AddFile(*file, file);
 }
 
-bool SimpleDescriptorDatabase::AddUnowned(
-    const FileDescriptorProto* PROTOBUF_NONNULL file) {
+bool SimpleDescriptorDatabase::AddUnowned(const FileDescriptorProto* file) {
   return index_.AddFile(*file, file);
 }
 
-bool SimpleDescriptorDatabase::FindFileByName(
-    StringViewArg filename, FileDescriptorProto* PROTOBUF_NONNULL output) {
+bool SimpleDescriptorDatabase::FindFileByName(StringViewArg filename,
+                                              FileDescriptorProto* output) {
   return MaybeCopy(index_.FindFile(filename), output);
 }
 
 bool SimpleDescriptorDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* PROTOBUF_NONNULL output) {
+    StringViewArg symbol_name, FileDescriptorProto* output) {
   return MaybeCopy(index_.FindSymbol(symbol_name), output);
 }
 
 bool SimpleDescriptorDatabase::FindFileContainingExtension(
     StringViewArg containing_type, int field_number,
-    FileDescriptorProto* PROTOBUF_NONNULL output) {
+    FileDescriptorProto* output) {
   return MaybeCopy(index_.FindExtension(containing_type, field_number), output);
 }
 
@@ -384,14 +377,13 @@ bool SimpleDescriptorDatabase::FindAllExtensionNumbers(
 
 
 bool SimpleDescriptorDatabase::FindAllFileNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) {
+    std::vector<std::string>* output) {
   index_.FindAllFileNames(output);
   return true;
 }
 
-bool SimpleDescriptorDatabase::MaybeCopy(
-    const FileDescriptorProto* PROTOBUF_NULLABLE file,
-    FileDescriptorProto* PROTOBUF_NONNULL output) {
+bool SimpleDescriptorDatabase::MaybeCopy(const FileDescriptorProto* file,
+                                         FileDescriptorProto* output) {
   if (file == nullptr) return false;
   output->CopyFrom(*file);
   return true;
@@ -413,8 +405,7 @@ class EncodedDescriptorDatabase::DescriptorIndex {
   Value FindExtension(absl::string_view containing_type, int field_number);
   bool FindAllExtensionNumbers(absl::string_view containing_type,
                                std::vector<int>* output);
-  void FindAllFileNames(
-      std::vector<std::string>* PROTOBUF_NONNULL output) const;
+  void FindAllFileNames(std::vector<std::string>* output) const;
 
  private:
   friend class EncodedDescriptorDatabase;
@@ -562,8 +553,8 @@ class EncodedDescriptorDatabase::DescriptorIndex {
   std::vector<ExtensionEntry> by_extension_flat_;
 };
 
-bool EncodedDescriptorDatabase::Add(
-    const void* PROTOBUF_NONNULL encoded_file_descriptor, int size) {
+bool EncodedDescriptorDatabase::Add(const void* encoded_file_descriptor,
+                                    int size) {
   FileDescriptorProto file;
   if (file.ParseFromArray(encoded_file_descriptor, size)) {
     return index_->AddFile(file, std::make_pair(encoded_file_descriptor, size));
@@ -574,26 +565,26 @@ bool EncodedDescriptorDatabase::Add(
   }
 }
 
-bool EncodedDescriptorDatabase::AddCopy(
-    const void* PROTOBUF_NONNULL encoded_file_descriptor, int size) {
+bool EncodedDescriptorDatabase::AddCopy(const void* encoded_file_descriptor,
+                                        int size) {
   void* copy = operator new(size);
   memcpy(copy, encoded_file_descriptor, size);
   files_to_delete_.push_back(copy);
   return Add(copy, size);
 }
 
-bool EncodedDescriptorDatabase::FindFileByName(
-    StringViewArg filename, FileDescriptorProto* PROTOBUF_NONNULL output) {
+bool EncodedDescriptorDatabase::FindFileByName(StringViewArg filename,
+                                               FileDescriptorProto* output) {
   return MaybeParse(index_->FindFile(filename), output);
 }
 
 bool EncodedDescriptorDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* PROTOBUF_NONNULL output) {
+    StringViewArg symbol_name, FileDescriptorProto* output) {
   return MaybeParse(index_->FindSymbol(symbol_name), output);
 }
 
 bool EncodedDescriptorDatabase::FindNameOfFileContainingSymbol(
-    StringViewArg symbol_name, std::string* PROTOBUF_NONNULL output) {
+    StringViewArg symbol_name, std::string* output) {
   auto encoded_file = index_->FindSymbol(symbol_name);
   if (encoded_file.first == nullptr) return false;
 
@@ -622,7 +613,7 @@ bool EncodedDescriptorDatabase::FindNameOfFileContainingSymbol(
 
 bool EncodedDescriptorDatabase::FindFileContainingExtension(
     StringViewArg containing_type, int field_number,
-    FileDescriptorProto* PROTOBUF_NONNULL output) {
+    FileDescriptorProto* output) {
   return MaybeParse(index_->FindExtension(containing_type, field_number),
                     output);
 }
@@ -851,7 +842,7 @@ bool EncodedDescriptorDatabase::DescriptorIndex::FindAllExtensionNumbers(
 }
 
 void EncodedDescriptorDatabase::DescriptorIndex::FindAllFileNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) const {
+    std::vector<std::string>* output) const {
   output->resize(by_name_.size() + by_name_flat_.size());
   int i = 0;
   for (const auto& entry : by_name_) {
@@ -878,14 +869,13 @@ EncodedDescriptorDatabase::DescriptorIndex::FindFile(
 
 
 bool EncodedDescriptorDatabase::FindAllFileNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) {
+    std::vector<std::string>* output) {
   index_->FindAllFileNames(output);
   return true;
 }
 
 bool EncodedDescriptorDatabase::MaybeParse(
-    std::pair<const void * PROTOBUF_NULLABLE, int> encoded_file,
-    FileDescriptorProto* PROTOBUF_NONNULL output) {
+    std::pair<const void*, int> encoded_file, FileDescriptorProto* output) {
   if (encoded_file.first == nullptr) return false;
   absl::string_view source(static_cast<const char*>(encoded_file.first),
                            encoded_file.second);
@@ -908,8 +898,8 @@ DescriptorPoolDatabase::DescriptorPoolDatabase(
     : pool_(pool), options_(std::move(options)) {}
 DescriptorPoolDatabase::~DescriptorPoolDatabase() {}
 
-bool DescriptorPoolDatabase::FindFileByName(
-    StringViewArg filename, FileDescriptorProto* PROTOBUF_NONNULL output) {
+bool DescriptorPoolDatabase::FindFileByName(StringViewArg filename,
+                                            FileDescriptorProto* output) {
   const FileDescriptor* file = pool_.FindFileByName(filename);
   if (file == nullptr) return false;
   output->Clear();
@@ -921,7 +911,7 @@ bool DescriptorPoolDatabase::FindFileByName(
 }
 
 bool DescriptorPoolDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* PROTOBUF_NONNULL output) {
+    StringViewArg symbol_name, FileDescriptorProto* output) {
   const FileDescriptor* file = pool_.FindFileContainingSymbol(symbol_name);
   if (file == nullptr) return false;
   output->Clear();
@@ -934,7 +924,7 @@ bool DescriptorPoolDatabase::FindFileContainingSymbol(
 
 bool DescriptorPoolDatabase::FindFileContainingExtension(
     StringViewArg containing_type, int field_number,
-    FileDescriptorProto* PROTOBUF_NONNULL output) {
+    FileDescriptorProto* output) {
   const Descriptor* extendee = pool_.FindMessageTypeByName(containing_type);
   if (extendee == nullptr) return false;
 
@@ -968,8 +958,7 @@ bool DescriptorPoolDatabase::FindAllExtensionNumbers(
 // ===================================================================
 
 MergedDescriptorDatabase::MergedDescriptorDatabase(
-    DescriptorDatabase* PROTOBUF_NONNULL source1,
-    DescriptorDatabase* PROTOBUF_NONNULL source2) {
+    DescriptorDatabase* source1, DescriptorDatabase* source2) {
   sources_.push_back(source1);
   sources_.push_back(source2);
 }
@@ -978,8 +967,8 @@ MergedDescriptorDatabase::MergedDescriptorDatabase(
     : sources_(sources) {}
 MergedDescriptorDatabase::~MergedDescriptorDatabase() {}
 
-bool MergedDescriptorDatabase::FindFileByName(
-    StringViewArg filename, FileDescriptorProto* PROTOBUF_NONNULL output) {
+bool MergedDescriptorDatabase::FindFileByName(StringViewArg filename,
+                                              FileDescriptorProto* output) {
   for (DescriptorDatabase* source : sources_) {
     if (source->FindFileByName(filename, output)) {
       return true;
@@ -989,7 +978,7 @@ bool MergedDescriptorDatabase::FindFileByName(
 }
 
 bool MergedDescriptorDatabase::FindFileContainingSymbol(
-    StringViewArg symbol_name, FileDescriptorProto* PROTOBUF_NONNULL output) {
+    StringViewArg symbol_name, FileDescriptorProto* output) {
   for (size_t i = 0; i < sources_.size(); i++) {
     if (sources_[i]->FindFileContainingSymbol(symbol_name, output)) {
       // The symbol was found in source i.  However, if one of the previous
@@ -1011,7 +1000,7 @@ bool MergedDescriptorDatabase::FindFileContainingSymbol(
 
 bool MergedDescriptorDatabase::FindFileContainingExtension(
     StringViewArg containing_type, int field_number,
-    FileDescriptorProto* PROTOBUF_NONNULL output) {
+    FileDescriptorProto* output) {
   for (size_t i = 0; i < sources_.size(); i++) {
     if (sources_[i]->FindFileContainingExtension(containing_type, field_number,
                                                  output)) {
@@ -1051,7 +1040,7 @@ bool MergedDescriptorDatabase::FindAllExtensionNumbers(
 
 
 bool MergedDescriptorDatabase::FindAllFileNames(
-    std::vector<std::string>* PROTOBUF_NONNULL output) {
+    std::vector<std::string>* output) {
   bool implemented = false;
   for (DescriptorDatabase* source : sources_) {
     std::vector<std::string> source_output;
@@ -1068,5 +1057,3 @@ bool MergedDescriptorDatabase::FindAllFileNames(
 
 }  // namespace protobuf
 }  // namespace google
-
-#include "google/protobuf/port_undef.inc"
diff --git a/src/google/protobuf/descriptor_database.h b/src/google/protobuf/descriptor_database.h
index 7a3b22313..f3c7a4e05 100644
--- a/src/google/protobuf/descriptor_database.h
+++ b/src/google/protobuf/descriptor_database.h
@@ -70,22 +70,21 @@ class PROTOBUF_EXPORT DescriptorDatabase {
   // Find a file by file name.  Fills in in *output and returns true if found.
   // Otherwise, returns false, leaving the contents of *output undefined.
   virtual bool FindFileByName(StringViewArg filename,
-                              FileDescriptorProto* PROTOBUF_NONNULL output) = 0;
+                              FileDescriptorProto* output) = 0;
 
   // Find the file that declares the given fully-qualified symbol name.
   // If found, fills in *output and returns true, otherwise returns false
   // and leaves *output undefined.
   virtual bool FindFileContainingSymbol(StringViewArg symbol_name,
-                                        FileDescriptorProto* PROTOBUF_NONNULL
-                                            output) = 0;
+                                        FileDescriptorProto* output) = 0;
 
   // Find the file which defines an extension extending the given message type
   // with the given field number.  If found, fills in *output and returns true,
   // otherwise returns false and leaves *output undefined.  containing_type
   // must be a fully-qualified type name.
-  virtual bool FindFileContainingExtension(
-      StringViewArg containing_type, int field_number,
-      FileDescriptorProto* PROTOBUF_NONNULL output) = 0;
+  virtual bool FindFileContainingExtension(StringViewArg containing_type,
+                                           int field_number,
+                                           FileDescriptorProto* output) = 0;
 
   // Finds the tag numbers used by all known extensions of
   // extendee_type, and appends them to output in an undefined
@@ -97,9 +96,8 @@ class PROTOBUF_EXPORT DescriptorDatabase {
   //
   // This method has a default implementation that always returns
   // false.
-  virtual bool FindAllExtensionNumbers(
-      StringViewArg /* extendee_type */,
-      std::vector<int>* PROTOBUF_NONNULL /* output */) {
+  virtual bool FindAllExtensionNumbers(StringViewArg /* extendee_type */,
+                                       std::vector<int>* /* output */) {
     return false;
   }
 
@@ -112,8 +110,7 @@ class PROTOBUF_EXPORT DescriptorDatabase {
   //
   // This method has a default implementation that always returns
   // false.
-  virtual bool FindAllFileNames(
-      std::vector<std::string>* PROTOBUF_NONNULL /*output*/) {
+  virtual bool FindAllFileNames(std::vector<std::string>* /*output*/) {
     return false;
   }
 
@@ -122,14 +119,14 @@ class PROTOBUF_EXPORT DescriptorDatabase {
   // database will find all packages. Returns true if the database supports
   // searching all package names, otherwise returns false and leaves output
   // unchanged.
-  bool FindAllPackageNames(std::vector<std::string>* PROTOBUF_NONNULL output);
+  bool FindAllPackageNames(std::vector<std::string>* output);
 
   // Finds the message names and appends them to the output in an
   // undefined order. This method is best-effort: it's not guaranteed that the
   // database will find all messages. Returns true if the database supports
   // searching all message names, otherwise returns false and leaves output
   // unchanged.
-  bool FindAllMessageNames(std::vector<std::string>* PROTOBUF_NONNULL output);
+  bool FindAllMessageNames(std::vector<std::string>* output);
 
  private:
   static_assert(std::is_same<StringViewArg, absl::string_view>::value ||
@@ -173,27 +170,24 @@ class PROTOBUF_EXPORT SimpleDescriptorDatabase : public DescriptorDatabase {
   bool Add(const FileDescriptorProto& file);
 
   // Adds the FileDescriptorProto to the database and takes ownership of it.
-  bool AddAndOwn(const FileDescriptorProto* PROTOBUF_NONNULL file);
+  bool AddAndOwn(const FileDescriptorProto* file);
 
   // Adds the FileDescriptorProto to the database and not take ownership of it.
   // The owner must ensure file outlives the SimpleDescriptorDatabase.
-  bool AddUnowned(const FileDescriptorProto* PROTOBUF_NONNULL file);
+  bool AddUnowned(const FileDescriptorProto* file);
 
   // implements DescriptorDatabase -----------------------------------
   bool FindFileByName(StringViewArg filename,
-                      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                      FileDescriptorProto* output) override;
   bool FindFileContainingSymbol(StringViewArg symbol_name,
-                                FileDescriptorProto* PROTOBUF_NONNULL
-                                    output) override;
-  bool FindFileContainingExtension(
-      StringViewArg containing_type, int field_number,
-      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                                FileDescriptorProto* output) override;
+  bool FindFileContainingExtension(StringViewArg containing_type,
+                                   int field_number,
+                                   FileDescriptorProto* output) override;
   bool FindAllExtensionNumbers(StringViewArg extendee_type,
-                               std::vector<int>* PROTOBUF_NONNULL
-                                   output) override;
+                               std::vector<int>* output) override;
 
-  bool FindAllFileNames(
-      std::vector<std::string>* PROTOBUF_NONNULL output) override;
+  bool FindAllFileNames(std::vector<std::string>* output) override;
 
  private:
   // An index mapping file names, symbol names, and extension numbers to
@@ -214,8 +208,8 @@ class PROTOBUF_EXPORT SimpleDescriptorDatabase : public DescriptorDatabase {
     Value FindSymbol(StringViewArg name);
     Value FindExtension(StringViewArg containing_type, int field_number);
     bool FindAllExtensionNumbers(StringViewArg containing_type,
-                                 std::vector<int>* PROTOBUF_NONNULL output);
-    void FindAllFileNames(std::vector<std::string>* PROTOBUF_NONNULL output);
+                                 std::vector<int>* output);
+    void FindAllFileNames(std::vector<std::string>* output);
 
    private:
     absl::btree_map<std::string, Value> by_name_;
@@ -279,8 +273,7 @@ class PROTOBUF_EXPORT SimpleDescriptorDatabase : public DescriptorDatabase {
 
   // If file is non-nullptr, copy it into *output and return true, otherwise
   // return false.
-  bool MaybeCopy(const FileDescriptorProto* PROTOBUF_NULLABLE file,
-                 FileDescriptorProto* PROTOBUF_NONNULL output);
+  bool MaybeCopy(const FileDescriptorProto* file, FileDescriptorProto* output);
 };
 
 // Very similar to SimpleDescriptorDatabase, but stores all the descriptors
@@ -302,30 +295,27 @@ class PROTOBUF_EXPORT EncodedDescriptorDatabase : public DescriptorDatabase {
   // remain valid for the life of the database.  Returns false and logs an error
   // if the bytes are not a valid FileDescriptorProto or if the file conflicted
   // with a file already in the database.
-  bool Add(const void* PROTOBUF_NONNULL encoded_file_descriptor, int size);
+  bool Add(const void* encoded_file_descriptor, int size);
 
   // Like Add(), but makes a copy of the data, so that the caller does not
   // need to keep it around.
-  bool AddCopy(const void* PROTOBUF_NONNULL encoded_file_descriptor, int size);
+  bool AddCopy(const void* encoded_file_descriptor, int size);
 
   // Like FindFileContainingSymbol but returns only the name of the file.
   bool FindNameOfFileContainingSymbol(StringViewArg symbol_name,
-                                      std::string* PROTOBUF_NONNULL output);
+                                      std::string* output);
 
   // implements DescriptorDatabase -----------------------------------
   bool FindFileByName(StringViewArg filename,
-                      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                      FileDescriptorProto* output) override;
   bool FindFileContainingSymbol(StringViewArg symbol_name,
-                                FileDescriptorProto* PROTOBUF_NONNULL
-                                    output) override;
-  bool FindFileContainingExtension(
-      StringViewArg containing_type, int field_number,
-      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                                FileDescriptorProto* output) override;
+  bool FindFileContainingExtension(StringViewArg containing_type,
+                                   int field_number,
+                                   FileDescriptorProto* output) override;
   bool FindAllExtensionNumbers(StringViewArg extendee_type,
-                               std::vector<int>* PROTOBUF_NONNULL
-                                   output) override;
-  bool FindAllFileNames(
-      std::vector<std::string>* PROTOBUF_NONNULL output) override;
+                               std::vector<int>* output) override;
+  bool FindAllFileNames(std::vector<std::string>* output) override;
 
  private:
   class DescriptorIndex;
@@ -336,8 +326,8 @@ class PROTOBUF_EXPORT EncodedDescriptorDatabase : public DescriptorDatabase {
 
   // If encoded_file.first is non-nullptr, parse the data into *output and
   // return true, otherwise return false.
-  bool MaybeParse(std::pair<const void * PROTOBUF_NULLABLE, int> encoded_file,
-                  FileDescriptorProto* PROTOBUF_NONNULL output);
+  bool MaybeParse(std::pair<const void*, int> encoded_file,
+                  FileDescriptorProto* output);
 };
 
 struct PROTOBUF_EXPORT DescriptorPoolDatabaseOptions {
@@ -357,16 +347,14 @@ class PROTOBUF_EXPORT DescriptorPoolDatabase : public DescriptorDatabase {
 
   // implements DescriptorDatabase -----------------------------------
   bool FindFileByName(StringViewArg filename,
-                      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                      FileDescriptorProto* output) override;
   bool FindFileContainingSymbol(StringViewArg symbol_name,
-                                FileDescriptorProto* PROTOBUF_NONNULL
-                                    output) override;
-  bool FindFileContainingExtension(
-      StringViewArg containing_type, int field_number,
-      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                                FileDescriptorProto* output) override;
+  bool FindFileContainingExtension(StringViewArg containing_type,
+                                   int field_number,
+                                   FileDescriptorProto* output) override;
   bool FindAllExtensionNumbers(StringViewArg extendee_type,
-                               std::vector<int>* PROTOBUF_NONNULL
-                                   output) override;
+                               std::vector<int>* output) override;
 
  private:
   const DescriptorPool& pool_;
@@ -378,8 +366,8 @@ class PROTOBUF_EXPORT DescriptorPoolDatabase : public DescriptorDatabase {
 class PROTOBUF_EXPORT MergedDescriptorDatabase : public DescriptorDatabase {
  public:
   // Merge just two databases.  The sources remain property of the caller.
-  MergedDescriptorDatabase(DescriptorDatabase* PROTOBUF_NONNULL source1,
-                           DescriptorDatabase* PROTOBUF_NONNULL source2);
+  MergedDescriptorDatabase(DescriptorDatabase* source1,
+                           DescriptorDatabase* source2);
   // Merge more than two databases.  The sources remain property of the caller.
   // The vector may be deleted after the constructor returns but the
   // DescriptorDatabases need to stick around.
@@ -391,24 +379,21 @@ class PROTOBUF_EXPORT MergedDescriptorDatabase : public DescriptorDatabase {
 
   // implements DescriptorDatabase -----------------------------------
   bool FindFileByName(StringViewArg filename,
-                      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                      FileDescriptorProto* output) override;
   bool FindFileContainingSymbol(StringViewArg symbol_name,
-                                FileDescriptorProto* PROTOBUF_NONNULL
-                                    output) override;
-  bool FindFileContainingExtension(
-      StringViewArg containing_type, int field_number,
-      FileDescriptorProto* PROTOBUF_NONNULL output) override;
+                                FileDescriptorProto* output) override;
+  bool FindFileContainingExtension(StringViewArg containing_type,
+                                   int field_number,
+                                   FileDescriptorProto* output) override;
   // Merges the results of calling all databases. Returns true iff any
   // of the databases returned true.
   bool FindAllExtensionNumbers(StringViewArg extendee_type,
-                               std::vector<int>* PROTOBUF_NONNULL
-                                   output) override;
+                               std::vector<int>* output) override;
 
 
   // This function is best-effort. Returns true if at least one underlying
   // DescriptorDatabase returns true.
-  bool FindAllFileNames(
-      std::vector<std::string>* PROTOBUF_NONNULL output) override;
+  bool FindAllFileNames(std::vector<std::string>* output) override;
 
  private:
   std::vector<DescriptorDatabase*> sources_;
-- 
2.51.0

