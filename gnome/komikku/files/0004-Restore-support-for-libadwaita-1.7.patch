From 11159ca103262d3c01edb25f7bf4edb3f941b6f0 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Thu, 16 Oct 2025 12:57:47 +0800
Subject: [PATCH] Restore support for libadwaita < 1.7

Remove Adw.WrapBox

Reverts https://codeberg.org/valos/Komikku/commit/736a56a82f8f8ec75613b4e278c88bab96d718a0

Restore GTK spinner

Reverts https://codeberg.org/valos/Komikku/commit/9095f1bb54ef64d3c1d16c8b7d89cc55df0f2736

Remove enable-transitions

Reverts https://codeberg.org/valos/Komikku/commit/6c2ae8202d714c27a5f3c9c03d811985e31d892e

Do not use advanced_banner

Reverts: https://codeberg.org/valos/Komikku/commit/5e8b2baf82814b6bc58eaace6a24b226bcccd4b5

Switch away from Adw.ShortcutsDialog

Reverts https://codeberg.org/valos/Komikku/commit/6568f575275190b73f5aa280b6f8d6e76ef9c597

Tweak accent color

get_row is not available in adwaita

Reverts https://codeberg.org/valos/Komikku/commit/9304b947aff70abbd97fd3d2bed155b306849694
---
 data/css/style.css                        |  4 ++
 data/info.febvre.Komikku.gresource.xml.in |  2 +-
 data/meson.build                          |  2 +-
 data/ui/application_window.blp            |  2 +-
 data/ui/card.blp                          | 15 ++--
 data/ui/card_tracking.blp                 |  1 -
 data/ui/card_tracking_search.blp          |  2 +-
 data/ui/explorer_search.blp               | 32 ++++++---
 data/ui/preferences.blp                   |  6 --
 data/ui/shortcuts.blp                     | 88 -----------------------
 data/ui/shortcuts_overview.blp            | 84 ++++++++++++++++++++++
 komikku/application.py                    | 41 +++++++----
 komikku/card/__init__.py                  | 24 +++----
 komikku/card/chapters_list.py             | 12 ++--
 komikku/explorer/__init__.py              |  6 ++
 komikku/explorer/search/__init__.py       | 11 +--
 komikku/explorer/search/latest_updates.py |  4 ++
 komikku/explorer/search/most_popular.py   |  4 ++
 komikku/explorer/search/search.py         |  4 ++
 komikku/explorer/search/search_global.py  |  4 +-
 komikku/library/__init__.py               | 11 ++-
 komikku/library/categories_list.py        |  4 +-
 komikku/preferences.py                    | 34 ++++-----
 komikku/reader/__init__.py                |  2 +-
 komikku/reader/pager/infinite_canvas.py   |  6 +-
 komikku/reader/pager/page.py              |  9 ++-
 komikku/servers/__init__.py               |  5 ++
 komikku/servers/loader.py                 |  7 ++
 komikku/servers/utils.py                  | 18 ++++-
 29 files changed, 257 insertions(+), 187 deletions(-)
 delete mode 100644 data/ui/shortcuts.blp
 create mode 100644 data/ui/shortcuts_overview.blp

diff --git a/data/css/style.css b/data/css/style.css
index 7e569094..ccbe08e5 100644
--- a/data/css/style.css
+++ b/data/css/style.css
@@ -3,6 +3,10 @@
  *
  * SPDX-License-Identifier: GPL-3.0-or-later
  */
+
+@define-color accent_bg_color #f66151;
+@define-color accent_color @orange_5;  /* #c64600 */
+
 .spinner {
     color: var(--accent-bg-color);
 }
diff --git a/data/info.febvre.Komikku.gresource.xml.in b/data/info.febvre.Komikku.gresource.xml.in
index 3a86a033..ac8c39dd 100644
--- a/data/info.febvre.Komikku.gresource.xml.in
+++ b/data/info.febvre.Komikku.gresource.xml.in
@@ -19,7 +19,7 @@
         <file compressed="true" preprocess="xml-stripblanks">ui/preferences_servers_languages.ui</file>
         <file compressed="true" preprocess="xml-stripblanks">ui/preferences_servers_settings.ui</file>
         <file compressed="true" preprocess="xml-stripblanks">ui/reader.ui</file>
-        <file compressed="true" preprocess="xml-stripblanks">ui/shortcuts.ui</file>
+        <file compressed="true" preprocess="xml-stripblanks">ui/shortcuts_overview.ui</file>
         <file compressed="true" preprocess="xml-stripblanks">ui/support.ui</file>
         <file compressed="true" preprocess="xml-stripblanks">ui/webview.ui</file>
 
diff --git a/data/meson.build b/data/meson.build
index 4f50d651..78720b30 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -133,7 +133,7 @@ blueprints = custom_target('blueprints',
         'ui/preferences_servers_languages.blp',
         'ui/preferences_servers_settings.blp',
         'ui/reader.blp',
-        'ui/shortcuts.blp',
+        'ui/shortcuts_overview.blp',
         'ui/support.blp',
         'ui/webview.blp',
     ),
diff --git a/data/ui/application_window.blp b/data/ui/application_window.blp
index bcd701f1..2aaa0c7f 100644
--- a/data/ui/application_window.blp
+++ b/data/ui/application_window.blp
@@ -19,7 +19,7 @@ template $ApplicationWindow: Adw.ApplicationWindow {
       halign: center;
       valign: start;
 
-      child: Adw.Spinner pool_to_update_spinner {
+      child: Spinner pool_to_update_spinner {
         height-request: 48;
         width-request: 48;
 
diff --git a/data/ui/card.blp b/data/ui/card.blp
index edf69c35..d74e198a 100644
--- a/data/ui/card.blp
+++ b/data/ui/card.blp
@@ -61,7 +61,7 @@ template $CardPage : Adw.NavigationPage {
         }
 
         child: Adw.ViewStack stack {
-          enable-transitions: true;
+          can-target: true;
 
           Adw.ViewStackPage {
             name: "info";
@@ -183,13 +183,12 @@ template $CardPage : Adw.NavigationPage {
                         icon-name: "genres-symbolic";
                       }
 
-                      Adw.WrapBox genres_wrapbox {
-                        justify: fill;
-                        halign: start;
-                        hexpand: true;
-                        valign: center;
-                        line-spacing: 6;
-                        child-spacing: 6;
+                      Label genres_label {
+                        label: "genres";
+                        justify: right;
+                        wrap: true;
+                        wrap-mode: word_char;
+                        xalign: 1;
                       }
                     }
 
diff --git a/data/ui/card_tracking.blp b/data/ui/card_tracking.blp
index 4dc8fd83..4126eb6e 100644
--- a/data/ui/card_tracking.blp
+++ b/data/ui/card_tracking.blp
@@ -12,7 +12,6 @@ template $TrackingDialog : Adw.PreferencesDialog {
   Adw.PreferencesPage {
     name: "trackers";
     Adw.PreferencesGroup group {
-      separate-rows: true;
     }
   }
 }
diff --git a/data/ui/card_tracking_search.blp b/data/ui/card_tracking_search.blp
index 1239603e..80f5b637 100644
--- a/data/ui/card_tracking_search.blp
+++ b/data/ui/card_tracking_search.blp
@@ -62,7 +62,7 @@ template $TrackingSearchSubPage : Adw.NavigationPage {
               valign: center;
               halign: center;
 
-              Adw.Spinner spinner {
+              Spinner spinner {
                 height-request: 48;
                 width-request: 48;
               }
diff --git a/data/ui/explorer_search.blp b/data/ui/explorer_search.blp
index 72b6ac4a..821b1b61 100644
--- a/data/ui/explorer_search.blp
+++ b/data/ui/explorer_search.blp
@@ -36,8 +36,6 @@ template $ExplorerSearchPage : Adw.NavigationPage {
     }
 
     content: Adw.ViewStack stack {
-      enable-transitions: true;
-
       Adw.ViewStackPage {
         name: "search";
         title: _("Search");
@@ -123,9 +121,13 @@ template $ExplorerSearchPage : Adw.NavigationPage {
                     valign: center;
                     halign: center;
 
-                    Adw.Spinner search_spinner {
-                      height-request: 48;
-                      width-request: 48;
+                    Spinner search_spinner {
+                        height-request: 48;
+                        width-request: 48;
+
+                        styles [
+                          "spinner",
+                        ]
                     }
                   };
                 }
@@ -198,9 +200,13 @@ template $ExplorerSearchPage : Adw.NavigationPage {
                   valign: center;
                   halign: center;
 
-                  Adw.Spinner most_popular_spinner {
-                    height-request: 48;
-                    width-request: 48;
+                  Spinner most_popular_spinner {
+                      height-request: 48;
+                      width-request: 48;
+
+                      styles [
+                        "spinner",
+                      ]
                   }
                 };
               }
@@ -265,9 +271,13 @@ template $ExplorerSearchPage : Adw.NavigationPage {
                   valign: center;
                   halign: center;
 
-                  Adw.Spinner latest_updates_spinner {
-                    height-request: 48;
-                    width-request: 48;
+                  Spinner latest_updates_spinner {
+                      height-request: 48;
+                      width-request: 48;
+
+                      styles [
+                        "spinner",
+                      ]
                   }
                 };
               }
diff --git a/data/ui/preferences.blp b/data/ui/preferences.blp
index 1343750e..802ffbc6 100644
--- a/data/ui/preferences.blp
+++ b/data/ui/preferences.blp
@@ -315,12 +315,6 @@ template $PreferencesDialog : Adw.PreferencesDialog {
     title: _("Advanced");
     icon-name: "applications-science-symbolic";
 
-    banner: Adw.Banner advanced_banner {
-        title: _("A setting has changed that requires a restart to take effect");
-        button-label: _("Got it!");
-        button-style: suggested;
-    };
-
     Adw.PreferencesGroup {
       title: _("Data");
       description: _("Data not saved in the library");
diff --git a/data/ui/shortcuts.blp b/data/ui/shortcuts.blp
deleted file mode 100644
index ba00084d..00000000
--- a/data/ui/shortcuts.blp
+++ /dev/null
@@ -1,88 +0,0 @@
-// SPDX-FileCopyrightText: 2019-2025 Val√©ry Febvre
-//
-// SPDX-License-Identifier: GPL-3.0-or-later
-
-using Gtk 4.0;
-using Adw 1;
-
-Adw.ShortcutsDialog shortcuts_dialog {
-  Adw.ShortcutsSection {
-    title: C_("Shortcut window description", "Application");
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Open Preferences");
-      action-name: "app.preferences";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Toggle Fullscreen Mode");
-      action-name: "app.fullscreen";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Open Keyboard Shortcuts");
-      action-name: "app.shortcuts";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Quit");
-      action-name: "app.quit";
-    }
-  }
-
-  Adw.ShortcutsSection {
-    title: C_("Shortcut window description", "Library");
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Add Manga");
-      action-name: "app.add";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Select All");
-      action-name: "app.select-all";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Search");
-      action-name: "app.enter-search-mode";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Toggle Categories Pane");
-      action-name: "app.library.toggle-categories";
-    }
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Update");
-      action-name: "app.library.update";
-    }
-  }
-
-  Adw.ShortcutsSection {
-    title: C_("Shortcut window description", "Manga Card");
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Select All Chapters");
-      action-name: "app.select-all";
-    }
-  }
-
-  Adw.ShortcutsSection {
-    title: C_("Shortcut window description", "Reader");
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Save Page");
-      action-name: "app.reader.save-page";
-    }
-  }
-
-  Adw.ShortcutsSection {
-    title: C_("Shortcut window description", "Download Manager");
-
-    Adw.ShortcutsItem {
-      title: C_("Shortcut window description", "Select All Downloads");
-      action-name: "app.select-all";
-    }
-  }
-}
diff --git a/data/ui/shortcuts_overview.blp b/data/ui/shortcuts_overview.blp
new file mode 100644
index 00000000..7bc98020
--- /dev/null
+++ b/data/ui/shortcuts_overview.blp
@@ -0,0 +1,84 @@
+// SPDX-FileCopyrightText: 2019-2025 Val√©ry Febvre
+//
+// SPDX-License-Identifier: GPL-3.0-or-later
+
+using Gtk 4.0;
+
+ShortcutsWindow shortcuts_overview {
+  modal: true;
+
+  ShortcutsSection {
+    section-name: "shortcuts";
+    max-height: 8;
+
+    ShortcutsGroup {
+      title: C_("Shortcut window description", "Application");
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Open Preferences");
+        accelerator: "<Primary>comma";
+      }
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Toggle Fullscreen Mode");
+        accelerator: "F11";
+      }
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Open Keyboard Shortcuts");
+        accelerator: "<Primary>question";
+      }
+    }
+
+    ShortcutsGroup {
+      title: C_("Shortcut window description", "Library");
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Add Manga");
+        accelerator: "<Primary>plus";
+      }
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Select All");
+        accelerator: "<Primary>A";
+      }
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Search");
+        accelerator: "<Primary>F";
+      }
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Update");
+        accelerator: "<Primary>R";
+      }
+    }
+
+    ShortcutsGroup {
+      title: C_("Shortcut window description", "Manga Card");
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Select All Chapters");
+        accelerator: "<Primary>A";
+      }
+    }
+
+    ShortcutsGroup {
+      title: C_("Shortcut window description", "Reader");
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Save Page");
+        accelerator: "<Primary>S";
+      }
+    }
+
+    ShortcutsGroup {
+      title: C_("Shortcut window description", "Download Manager");
+
+      ShortcutsShortcut {
+        title: C_("Shortcut window description", "Select All Downloads");
+        accelerator: "<Primary>A";
+      }
+    }
+  }
+}
diff --git a/komikku/application.py b/komikku/application.py
index 6d7027b6..879c5872 100644
--- a/komikku/application.py
+++ b/komikku/application.py
@@ -153,8 +153,8 @@ class ApplicationWindow(Adw.ApplicationWindow):
         self.css_provider = Gtk.CssProvider.new()
         Gtk.StyleContext.add_provider_for_display(Gdk.Display.get_default(), self.css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
 
-        self.activity_indicator = Adw.Spinner(
-            halign=Gtk.Align.CENTER, valign=Gtk.Align.CENTER, width_request=48, height_request=48, visible=False
+        self.activity_indicator = Gtk.Spinner(
+            halign=Gtk.Align.CENTER, valign=Gtk.Align.CENTER, width_request=48, height_request=48
         )
         self.overlay.add_overlay(self.activity_indicator)
 
@@ -345,7 +345,7 @@ class ApplicationWindow(Adw.ApplicationWindow):
         GLib.idle_add(self.show_notification)
 
     def init_accent_colors(self):
-        if Adw.StyleManager.get_default().get_system_supports_accent_colors() and Settings.get_default().system_accent_colors:
+        if Settings.get_default().system_accent_colors:
             self.css_provider.load_from_string('')
         else:
             self.css_provider.load_from_string(':root {--accent-bg-color: var(--red-1); --accent-color: oklab(from var(--accent-bg-color) var(--standalone-color-oklab));}')
@@ -383,7 +383,7 @@ class ApplicationWindow(Adw.ApplicationWindow):
 
         set_color_scheme()
 
-    def install_servers_modules(self):
+    def install_servers_modules(self, reinit=False):
         def run():
             res, status = install_servers_modules_from_repo(self.application.version)
             GLib.idle_add(complete, res, status)
@@ -391,7 +391,8 @@ class ApplicationWindow(Adw.ApplicationWindow):
         def complete(res, status):
             if res is True:
                 if status == 'updated':
-                    self.restart(_('Servers modules have been updated'))
+                    self.add_notification(_('Servers modules have been updated'))
+                    self.reinit_servers_modules()
 
             elif res is False:
                 if status == 'unchanged':
@@ -404,10 +405,13 @@ class ApplicationWindow(Adw.ApplicationWindow):
                         None,
                         cancel_label=_('Close'),
                     )
-                    self.application.logger.info('Failed to updates servers modules: incompatible app version')
+                if reinit:
+                    self.reinit_servers_modules()
 
             else:
                 self.application.logger.info('Failed to update servers modules')
+                if reinit:
+                    self.reinit_servers_modules()
 
         thread = threading.Thread(target=run)
         thread.daemon = True
@@ -506,10 +510,12 @@ available in your region/language."""))
 
     def on_shortcuts_menu_clicked(self, _action, _param):
         builder = Gtk.Builder()
-        builder.add_from_resource('/info/febvre/Komikku/ui/shortcuts.ui')
+        builder.add_from_resource('/info/febvre/Komikku/ui/shortcuts_overview.ui')
 
-        dialog = builder.get_object('shortcuts_dialog')
-        dialog.present(self)
+        shortcuts_overview = builder.get_object('shortcuts_overview')
+        shortcuts_overview.set_modal(True)
+        shortcuts_overview.set_transient_for(self)
+        shortcuts_overview.present()
 
     def open_support(self, _action, _param):
         self.support.show()
@@ -556,11 +562,20 @@ available in your region/language."""))
 
         return Gdk.EVENT_STOP
 
-    def restart(self, message):
-        def confirm_callback():
-            os.execv(sys.argv[0], sys.argv)
+    def reinit_servers_modules(self):
+        """Used when origin of servers modules change"""
+
+        # Reload servers modules
+        init_servers_modules(Settings.get_default().external_servers_modules, reload_modules=True)
+
+        # Force re-instantiation of server instance variables
+        self.library.reinstantiate_servers()
+        self.card.reinstantiate_server()
 
-        self.confirm(_('Restart?'), message, _('Restart'), confirm_callback)
+        for page in self.navigationview.get_navigation_stack():
+            if page.props.tag.startswith('explorer'):
+                self.explorer.reinstantiate_servers()
+                break
 
     def save_window_size(self):
         if self.is_fullscreen():
diff --git a/komikku/card/__init__.py b/komikku/card/__init__.py
index 9f736889..e00bfc1a 100644
--- a/komikku/card/__init__.py
+++ b/komikku/card/__init__.py
@@ -56,7 +56,7 @@ class CardPage(Adw.NavigationPage):
     buttons_box = Gtk.Template.Child('buttons_box')
     add_button = Gtk.Template.Child('add_button')
     resume_button = Gtk.Template.Child('resume_button')
-    genres_wrapbox = Gtk.Template.Child('genres_wrapbox')
+    genres_label = Gtk.Template.Child('genres_label')
     scanlators_label = Gtk.Template.Child('scanlators_label')
     chapters_label = Gtk.Template.Child('chapters_label')
     last_update_label = Gtk.Template.Child('last_update_label')
@@ -419,6 +419,12 @@ class CardPage(Adw.NavigationPage):
         if chapters is not None:
             self.chapters_list.refresh(chapters)
 
+    def reinstantiate_server(self):
+        """Used when servers modules origin change: server variable needs to be re-instantiated"""
+
+        if self.manga:
+            self.manga._server = None
+
     def remove_backdrop(self):
         self.remove_css_class('backdrop')
         self.backdrop_picture.set_paintable(None)
@@ -531,7 +537,7 @@ class InfoBox:
         self.buttons_box = self.card.buttons_box
         self.add_button = self.card.add_button
         self.resume_button = self.card.resume_button
-        self.genres_wrapbox = self.card.genres_wrapbox
+        self.genres_label = self.card.genres_label
         self.scanlators_label = self.card.scanlators_label
         self.chapters_label = self.card.chapters_label
         self.last_update_label = self.card.last_update_label
@@ -605,18 +611,10 @@ class InfoBox:
             self.resume_button.remove_css_class('suggested-action')
 
         if manga.genres:
-            self.genres_wrapbox.remove_all()
-
-            for genre in sorted(manga.genres):
-                label = Gtk.Label()
-                label.set_ellipsize(Pango.EllipsizeMode.END)
-                label.set_markup(html_escape(genre))
-                label.set_css_classes(['genre-label', 'caption'])
-                self.genres_wrapbox.append(label)
-
-            self.genres_wrapbox.get_parent().set_visible(True)
+            self.genres_label.set_markup(html_escape(', '.join(manga.genres)))
+            self.genres_label.get_parent().get_parent().set_visible(True)
         else:
-            self.genres_wrapbox.get_parent().set_visible(False)
+            self.genres_label.get_parent().get_parent().set_visible(False)
 
         if manga.scanlators:
             self.scanlators_label.set_markup(html_escape(', '.join(manga.scanlators)))
diff --git a/komikku/card/chapters_list.py b/komikku/card/chapters_list.py
index 5b27f138..fc0cf691 100644
--- a/komikku/card/chapters_list.py
+++ b/komikku/card/chapters_list.py
@@ -370,7 +370,7 @@ class ChaptersList:
         chapters_ids = []
         chapters_data = []
 
-        self.card.window.activity_indicator.set_visible(True)
+        self.card.window.activity_indicator.start()
 
         item = self.list_model.get_item(position.get_uint16())
         rank = item.chapter.rank
@@ -409,12 +409,12 @@ class ChaptersList:
 
                 item.emit_changed()
 
-            self.card.window.activity_indicator.set_visible(False)
+            self.card.window.activity_indicator.stop()
 
             self.card.refresh(unread_chapters=True)
             self.card.window.library.refresh_on_manga_state_changed(self.card.manga)
         else:
-            self.card.window.activity_indicator.set_visible(False)
+            self.card.window.activity_indicator.stop()
             self.card.window.add_notification(_('Failed to update chapters reading status'))
 
     def set_sort_order(self, invalidate=True):
@@ -473,7 +473,7 @@ class ChaptersList:
         chapters_ids = []
         chapters_data = []
 
-        self.card.window.activity_indicator.set_visible(True)
+        self.card.window.activity_indicator.start()
 
         # First, update DB
         for item in self.get_selected_chapters_items():
@@ -501,7 +501,7 @@ class ChaptersList:
                     yield True
 
                 self.card.leave_selection_mode()
-                self.card.window.activity_indicator.set_visible(False)
+                self.card.window.activity_indicator.stop()
 
                 self.card.refresh(unread_chapters=True)
                 self.card.window.library.refresh_on_manga_state_changed(self.card.manga)
@@ -512,7 +512,7 @@ class ChaptersList:
 
             run_generator(update_chapters_rows)
         else:
-            self.card.window.activity_indicator.set_visible(False)
+            self.card.window.activity_indicator.stop()
             self.card.leave_selection_mode()
             self.card.window.add_notification(_('Failed to update chapters reading status'))
 
diff --git a/komikku/explorer/__init__.py b/komikku/explorer/__init__.py
index 9247fb19..8e5055bf 100644
--- a/komikku/explorer/__init__.py
+++ b/komikku/explorer/__init__.py
@@ -15,5 +15,11 @@ class Explorer:
         self.search_page = ExplorerSearchPage(self)
         self.window.navigationview.add(self.search_page)
 
+    def reinstantiate_servers(self):
+        """Used when servers modules origin change: servers variables need to be re-instantiated"""
+
+        self.servers_page.populate()
+        self.search_page.reinstantiate_server(self.servers_page.servers)
+
     def show(self, servers=None):
         self.servers_page.show(servers)
diff --git a/komikku/explorer/search/__init__.py b/komikku/explorer/search/__init__.py
index 3162e63c..f1ced05e 100644
--- a/komikku/explorer/search/__init__.py
+++ b/komikku/explorer/search/__init__.py
@@ -39,12 +39,15 @@ class ExplorerSearchPage(Adw.NavigationPage):
     search_listbox = Gtk.Template.Child('search_listbox')
     search_no_results_status_page = Gtk.Template.Child('search_no_results_status_page')
     search_intro_status_page = Gtk.Template.Child('search_intro_status_page')
+    search_spinner = Gtk.Template.Child('search_spinner')
     most_popular_stack = Gtk.Template.Child('most_popular_stack')
     most_popular_listbox = Gtk.Template.Child('most_popular_listbox')
     most_popular_no_results_status_page = Gtk.Template.Child('most_popular_no_results_status_page')
+    most_popular_spinner = Gtk.Template.Child('most_popular_spinner')
     latest_updates_stack = Gtk.Template.Child('latest_updates_stack')
     latest_updates_listbox = Gtk.Template.Child('latest_updates_listbox')
     latest_updates_no_results_status_page = Gtk.Template.Child('latest_updates_no_results_status_page')
+    latest_updates_spinner = Gtk.Template.Child('latest_updates_spinner')
     viewswitcherbar = Gtk.Template.Child('viewswitcherbar')
 
     page = None
@@ -459,7 +462,7 @@ class ExplorerSearchPage(Adw.NavigationPage):
             if server != self.server:
                 return False
 
-            self.window.activity_indicator.set_visible(False)
+            self.window.activity_indicator.stop()
 
             manga = Manga.new(manga_data, self.server, Settings.get_default().long_strip_detection)
 
@@ -477,7 +480,7 @@ class ExplorerSearchPage(Adw.NavigationPage):
             if server != self.server:
                 return False
 
-            self.window.activity_indicator.set_visible(False)
+            self.window.activity_indicator.stop()
 
             self.window.card.init(manga)
 
@@ -485,13 +488,13 @@ class ExplorerSearchPage(Adw.NavigationPage):
             if server != self.server:
                 return False
 
-            self.window.activity_indicator.set_visible(False)
+            self.window.activity_indicator.stop()
 
             self.window.add_notification(message or _("Oops, failed to retrieve manga's information."), timeout=2)
 
             return False
 
-        self.window.activity_indicator.set_visible(True)
+        self.window.activity_indicator.start()
 
         if server is not None:
             self.server = server
diff --git a/komikku/explorer/search/latest_updates.py b/komikku/explorer/search/latest_updates.py
index 17b76920..78650550 100644
--- a/komikku/explorer/search/latest_updates.py
+++ b/komikku/explorer/search/latest_updates.py
@@ -20,6 +20,7 @@ class ExplorerSearchStackPageLatestUpdates(ExplorerSearchStackPage):
         ExplorerSearchStackPage.__init__(self, parent)
 
         self.stack = self.parent.latest_updates_stack
+        self.spinner = self.parent.latest_updates_spinner
         self.listbox = self.parent.latest_updates_listbox
         self.no_results_status_page = self.parent.latest_updates_no_results_status_page
 
@@ -43,6 +44,7 @@ class ExplorerSearchStackPageLatestUpdates(ExplorerSearchStackPage):
                 gc.collect()
 
         def complete(results, server):
+            self.spinner.stop()
             if not self.parent.can_page_be_updated_with_results('latest_updates', server.id):
                 return
 
@@ -59,6 +61,7 @@ class ExplorerSearchStackPageLatestUpdates(ExplorerSearchStackPage):
             self.render_covers()
 
         def error(results, server, message=None):
+            self.spinner.stop()
             if not self.parent.can_page_be_updated_with_results('latest_updates', server.id):
                 return
 
@@ -72,6 +75,7 @@ class ExplorerSearchStackPageLatestUpdates(ExplorerSearchStackPage):
             self.stack.set_visible_child_name('no_results')
 
         self.clear()
+        self.spinner.start()
         self.stack.set_visible_child_name('loading')
 
         if self.parent.requests.get('latest_updates') and self.parent.server.id in self.parent.requests['latest_updates']:
diff --git a/komikku/explorer/search/most_popular.py b/komikku/explorer/search/most_popular.py
index 1d48f7e6..815e07ab 100644
--- a/komikku/explorer/search/most_popular.py
+++ b/komikku/explorer/search/most_popular.py
@@ -20,6 +20,7 @@ class ExplorerSearchStackPageMostPopular(ExplorerSearchStackPage):
         ExplorerSearchStackPage.__init__(self, parent)
 
         self.stack = self.parent.most_popular_stack
+        self.spinner = self.parent.most_popular_spinner
         self.listbox = self.parent.most_popular_listbox
         self.no_results_status_page = self.parent.most_popular_no_results_status_page
 
@@ -43,6 +44,7 @@ class ExplorerSearchStackPageMostPopular(ExplorerSearchStackPage):
                 gc.collect()
 
         def complete(results, server):
+            self.spinner.stop()
             if not self.parent.can_page_be_updated_with_results('most_popular', server.id):
                 return
 
@@ -59,6 +61,7 @@ class ExplorerSearchStackPageMostPopular(ExplorerSearchStackPage):
             self.render_covers()
 
         def error(results, server, message=None):
+            self.spinner.stop()
             if not self.parent.can_page_be_updated_with_results('most_popular', server.id):
                 return
 
@@ -72,6 +75,7 @@ class ExplorerSearchStackPageMostPopular(ExplorerSearchStackPage):
             self.stack.set_visible_child_name('no_results')
 
         self.clear()
+        self.spinner.start()
         self.stack.set_visible_child_name('loading')
 
         if self.parent.requests.get('most_popular') and self.parent.server.id in self.parent.requests['most_popular']:
diff --git a/komikku/explorer/search/search.py b/komikku/explorer/search/search.py
index 17d8a10b..ac870495 100644
--- a/komikku/explorer/search/search.py
+++ b/komikku/explorer/search/search.py
@@ -20,6 +20,7 @@ class ExplorerSearchStackPageSearch(ExplorerSearchStackPage):
         ExplorerSearchStackPage.__init__(self, parent)
 
         self.stack = self.parent.search_stack
+        self.spinner = self.parent.search_spinner
         self.listbox = self.parent.search_listbox
         self.no_results_status_page = self.parent.search_no_results_status_page
 
@@ -55,6 +56,7 @@ class ExplorerSearchStackPageSearch(ExplorerSearchStackPage):
                 gc.collect()
 
         def complete(results, server):
+            self.spinner.stop()
             if not self.parent.can_page_be_updated_with_results('search', server.id):
                 return
 
@@ -71,6 +73,7 @@ class ExplorerSearchStackPageSearch(ExplorerSearchStackPage):
             self.render_covers()
 
         def error(results, server, message=None):
+            self.spinner.stop()
             if not self.parent.can_page_be_updated_with_results('search', server.id):
                 return
 
@@ -85,6 +88,7 @@ class ExplorerSearchStackPageSearch(ExplorerSearchStackPage):
             self.stack.set_visible_child_name('no_results')
 
         self.clear()
+        self.spinner.start()
         self.stack.set_visible_child_name('loading')
         self.listbox.set_sort_func(None)
 
diff --git a/komikku/explorer/search/search_global.py b/komikku/explorer/search/search_global.py
index dc5179f6..c974bb72 100644
--- a/komikku/explorer/search/search_global.py
+++ b/komikku/explorer/search/search_global.py
@@ -8,7 +8,6 @@ import gc
 from gettext import gettext as _
 import threading
 
-from gi.repository import Adw
 from gi.repository import GLib
 from gi.repository import Gio
 from gi.repository import Gtk
@@ -258,7 +257,8 @@ class ExplorerSearchStackPageSearchGlobal(ExplorerSearchStackPage):
             row.results = False
             row.is_result = False
             row.add_css_class('explorer-server-listboxrow')
-            spinner = Adw.Spinner()
+            spinner = Gtk.Spinner()
+            spinner.start()
             row.set_child(spinner)
             self.listbox.append(row)
 
diff --git a/komikku/library/__init__.py b/komikku/library/__init__.py
index 35e4f35d..b8130c14 100644
--- a/komikku/library/__init__.py
+++ b/komikku/library/__init__.py
@@ -678,6 +678,13 @@ class LibraryPage(Adw.NavigationPage):
         if self.selected_filters:
             self.flowbox.invalidate_filter()
 
+    def reinstantiate_servers(self):
+        """Used when servers modules origin change: servers variables need to be re-instantiated"""
+
+        # Clear thumbnails servers
+        for thumbnail in self.flowbox:
+            thumbnail.manga._server = None
+
     def remove_thumbnail(self, manga):
         # Remove manga thumbnail in flowbox
         thumbnail = self.flowbox.get_first_child()
@@ -737,7 +744,7 @@ class LibraryPage(Adw.NavigationPage):
         chapters_ids = []
         chapters_data = []
 
-        self.window.activity_indicator.set_visible(True)
+        self.window.activity_indicator.start()
 
         for thumbnail in self.flowbox.get_selected_children():
             for chapter in thumbnail.manga.chapters:
@@ -754,7 +761,7 @@ class LibraryPage(Adw.NavigationPage):
             res = update_rows(db_conn, 'chapters', chapters_ids, chapters_data)
         db_conn.close()
 
-        self.window.activity_indicator.set_visible(False)
+        self.window.activity_indicator.stop()
 
         if not res:
             self.window.add_notification(_('Failed to update reading status'))
diff --git a/komikku/library/categories_list.py b/komikku/library/categories_list.py
index 27631448..8f8970a0 100644
--- a/komikku/library/categories_list.py
+++ b/komikku/library/categories_list.py
@@ -97,13 +97,13 @@ class CategoriesList:
             GLib.idle_add(complete)
 
         def complete():
-            self.library.window.activity_indicator.set_visible(False)
+            self.library.window.activity_indicator.stop()
 
             # Leave library section mode and refresh library
             self.library.leave_selection_mode()
             GLib.idle_add(self.library.populate)
 
-        self.library.window.activity_indicator.set_visible(True)
+        self.library.window.activity_indicator.start()
 
         thread = threading.Thread(target=run)
         thread.daemon = True
diff --git a/komikku/preferences.py b/komikku/preferences.py
index 7454e1e8..a6c22863 100644
--- a/komikku/preferences.py
+++ b/komikku/preferences.py
@@ -56,7 +56,6 @@ class PreferencesDialog(Adw.PreferencesDialog):
     page_numbering_switch = Gtk.Template.Child('page_numbering_switch')
     fullscreen_switch = Gtk.Template.Child('fullscreen_switch')
 
-    advanced_banner = Gtk.Template.Child('advanced_banner')
     clear_cached_data_actionrow = Gtk.Template.Child('clear_cached_data_actionrow')
     clear_cached_data_button = Gtk.Template.Child('clear_cached_data_button')
     clear_cached_data_on_app_close_switch = Gtk.Template.Child('clear_cached_data_on_app_close_switch')
@@ -71,10 +70,8 @@ class PreferencesDialog(Adw.PreferencesDialog):
 
         self.window = window
         self.settings = Settings.get_default()
-        self.external_servers_modules_in_use = self.settings.external_servers_modules
 
         self.connect('closed', self.on_closed)
-        self.advanced_banner.connect('button-clicked', lambda banner: banner.set_revealed(False))
 
         self.set_config_values()
 
@@ -199,9 +196,12 @@ class PreferencesDialog(Adw.PreferencesDialog):
             Gtk.Settings.get_default().set_property('gtk-enable-animations', True)
 
     def on_external_servers_modules_changed(self, switch_button, _gparam):
-        active = switch_button.get_active()
-        self.advanced_banner.set_revealed(active != self.external_servers_modules_in_use)
-        self.settings.external_servers_modules = active
+        self.settings.external_servers_modules = switch_button.get_active()
+
+        if switch_button.get_active():
+            self.window.install_servers_modules(reinit=True)
+        else:
+            self.window.reinit_servers_modules()
 
     def on_fullscreen_changed(self, switch_button, _gparam):
         self.settings.fullscreen = switch_button.get_active()
@@ -510,11 +510,12 @@ class PreferencesServersLanguagesSubPage(Adw.NavigationPage):
         self.settings = Settings.get_default()
 
     def clear(self):
-        row = self.group.get_row(0)
-        while row:
-            next_row = row.get_next_sibling()
-            self.group.remove(row)
-            row = next_row
+        listbox = self.group.get_first_child().get_last_child().get_first_child()
+        switchrow = listbox.get_first_child()
+        while switchrow:
+            next_switchrow = switchrow.get_next_sibling()
+            self.group.remove(switchrow)
+            switchrow = next_switchrow
 
     def on_language_activated(self, switchrow, _gparam, code):
         if switchrow.get_active():
@@ -557,11 +558,12 @@ class PreferencesServersSettingsSubPage(Adw.NavigationPage):
         self.keyring_helper = KeyringHelper()
 
     def clear(self):
-        row = self.group.get_row(0)
-        while row:
-            next_row = row.get_next_sibling()
-            self.group.remove(row)
-            row = next_row
+        listbox = self.group.get_first_child().get_last_child().get_first_child()
+        child = listbox.get_first_child()
+        while child:
+            next_child = child.get_next_sibling()
+            self.group.remove(child)
+            child = next_child
 
     def on_server_activated(self, row, _gparam, server_main_id):
         if isinstance(row, Adw.ExpanderRow):
diff --git a/komikku/reader/__init__.py b/komikku/reader/__init__.py
index 6b7e16f9..9fc8067c 100644
--- a/komikku/reader/__init__.py
+++ b/komikku/reader/__init__.py
@@ -502,7 +502,7 @@ class SettingsDialog(Adw.PreferencesDialog):
         page = Adw.PreferencesPage(title=_('Filters'))
         self.add(page)
 
-        group = Adw.PreferencesGroup(title=_('Filters'), separate_rows=True)
+        group = Adw.PreferencesGroup(title=_('Filters'))
 
         filters = {
             'brightness': {
diff --git a/komikku/reader/pager/infinite_canvas.py b/komikku/reader/pager/infinite_canvas.py
index 53c1d59e..bb582dbb 100644
--- a/komikku/reader/pager/infinite_canvas.py
+++ b/komikku/reader/pager/infinite_canvas.py
@@ -276,8 +276,8 @@ class KInfiniteCanvas(Gtk.Widget, Gtk.Scrollable):
             visible |= page._ic_position < 0 and page._ic_position + page_height >= height
             page.obscured = not visible
 
-            if page.status in ('rendering', 'allocable') and not page.activity_indicator.get_visible():
-                page.activity_indicator.set_visible(visible)
+            if page.status in ('rendering', 'allocable') and not page.activity_indicator.get_spinning():
+                page.activity_indicator.start()
 
             position = Graphene.Point()
             position.init(0, page._ic_position)
@@ -362,7 +362,7 @@ class KInfiniteCanvas(Gtk.Widget, Gtk.Scrollable):
 
     def on_page_rendered(self, page, update, retry):
         if not update:
-            page.activity_indicator.set_visible(False)
+            page.activity_indicator.stop()
 
             if retry:
                 # No idea why this reset is necessary
diff --git a/komikku/reader/pager/page.py b/komikku/reader/pager/page.py
index 29a5fb6d..efffb5e5 100644
--- a/komikku/reader/pager/page.py
+++ b/komikku/reader/pager/page.py
@@ -5,7 +5,6 @@
 from gettext import gettext as _
 import threading
 
-from gi.repository import Adw
 from gi.repository import GLib
 from gi.repository import GObject
 from gi.repository import Gtk
@@ -51,8 +50,8 @@ class Page(Gtk.Overlay):
             self.zoomable = False
 
         # Activity indicator
-        self.activity_indicator = Adw.Spinner(
-            halign=Gtk.Align.CENTER, valign=Gtk.Align.CENTER, width_request=48, height_request=48, visible=False
+        self.activity_indicator = Gtk.Spinner(
+            halign=Gtk.Align.CENTER, valign=Gtk.Align.CENTER, width_request=48, height_request=48
         )
         self.add_overlay(self.activity_indicator)
 
@@ -328,8 +327,8 @@ class Page(Gtk.Overlay):
 
     def start_activity_indicator(self):
         if self.reader.reading_mode != 'webtoon':
-            self.activity_indicator.set_visible(True)
+            self.activity_indicator.start()
 
     def stop_activity_indicator(self, *args):
         if self.reader.reading_mode != 'webtoon':
-            self.activity_indicator.set_visible(False)
+            self.activity_indicator.stop()
diff --git a/komikku/servers/__init__.py b/komikku/servers/__init__.py
index 2b2e4ffb..2047a154 100644
--- a/komikku/servers/__init__.py
+++ b/komikku/servers/__init__.py
@@ -24,9 +24,11 @@ from komikku.consts import LOGO_SIZE
 from komikku.consts import REQUESTS_TIMEOUT
 from komikku.consts import USER_AGENT
 from komikku.models.keyring import KeyringHelper
+from komikku.servers.loader import clear_servers_finders
 from komikku.servers.loader import ServerFinder
 from komikku.servers.loader import ServerFinderPriority
 from komikku.servers.utils import get_server_main_id_by_id
+from komikku.servers.utils import get_servers_modules
 from komikku.utils import BaseServer
 from komikku.utils import get_cache_dir
 from komikku.utils import get_cached_logos_dir
@@ -341,6 +343,7 @@ class Server(BaseServer, ABC):
 
 
 def init_servers_modules(use_external_servers_modules, reload_modules=False):
+    clear_servers_finders()
     # Add a first Finder with HIGH priority
     server_finder = ServerFinder(priority=ServerFinderPriority.HIGH)
     server_finder.add_path(os.environ.get('KOMIKKU_SERVERS_PATH'))
@@ -361,6 +364,8 @@ def init_servers_modules(use_external_servers_modules, reload_modules=False):
         server_finder.add_path(os.path.join(get_cache_dir(), 'servers/repo'))
         server_finder.install()
 
+    if reload_modules:
+        get_servers_modules(reload=reload_modules)
 
 def install_servers_modules_from_repo(app_version):
     """
diff --git a/komikku/servers/loader.py b/komikku/servers/loader.py
index d4c25e87..fea90964 100644
--- a/komikku/servers/loader.py
+++ b/komikku/servers/loader.py
@@ -84,3 +84,10 @@ class ServerLoader(importlib.machinery.SourceFileLoader):
             module.__path__ = [os.path.dirname(spec.origin)]
 
         return module
+
+def clear_servers_finders():
+    for finder in reversed(sys.meta_path):
+        if not isinstance(finder, ServerFinder):
+            continue
+
+        sys.meta_path.remove(finder)
diff --git a/komikku/servers/utils.py b/komikku/servers/utils.py
index 4714f026..f033d6bb 100644
--- a/komikku/servers/utils.py
+++ b/komikku/servers/utils.py
@@ -279,7 +279,7 @@ def get_servers_list(include_disabled=False, order_by=('lang', 'name')):
     return sorted(servers, key=itemgetter(*order_by))
 
 
-def get_servers_modules():
+def get_servers_modules(reload=False):
     def import_external_modules(servers_path, modules, modules_names, multi=False):
         if multi:
             servers_path = os.path.join(servers_path, 'multi')
@@ -298,6 +298,8 @@ def get_servers_modules():
                 continue
 
             module = importlib.import_module(f'.{name}', package='komikku.servers.multi' if multi else 'komikku.servers')
+            if reload:
+                module = importlib.reload(module)
             modules.append(module)
             modules_names.append(module_name)
             count += 1
@@ -314,6 +316,8 @@ def get_servers_modules():
                 continue
 
             module = importlib.import_module(module_name)
+            if reload:
+                module = importlib.reload(module)
             modules.append(module)
             modules_names.append(module_name)
             count += 1
@@ -341,13 +345,23 @@ def get_servers_modules():
                     # Not very likely
                     continue
 
+                if reload:
+                    # Multi-servers must be imported first
+                    import_external_modules(servers_path, modules, modules_names, multi=True)
+
                 import_external_modules(servers_path, modules, modules_names, multi=False)
 
         elif not internal_done:
             # Import internal servers
             import komikku.servers
 
-            count = import_internal_modules(komikku.servers, modules, modules_names)
+            count = 0
+            if reload:
+                # Multi-servers must be imported first
+                import komikku.servers.multi
+                count += import_internal_modules(komikku.servers.multi, modules, modules_names)
+
+            count += import_internal_modules(komikku.servers, modules, modules_names)
 
             if count > 0:
                 internal_done = True
