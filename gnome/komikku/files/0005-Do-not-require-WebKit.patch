From 2347bf93c47d69ae9613361e6e739d115498ecdd Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Fri, 17 Oct 2025 09:31:54 +0800
Subject: [PATCH] Do not require WebKit

---
 data/ui/preferences.blp                       | 19 ------------
 komikku/application.py                        |  2 --
 komikku/consts.py                             |  1 -
 komikku/debug_info.py                         |  4 ---
 komikku/explorer/search/search_global.py      |  1 -
 komikku/preferences.py                        | 29 -------------------
 komikku/servers/comichubfree/__init__.py      | 13 ++++-----
 komikku/servers/goldenmangas/__init__.py      | 11 ++++---
 komikku/servers/japscan/__init__.py           | 14 ++++-----
 komikku/servers/mangademon/__init__.py        | 11 ++++---
 komikku/servers/mangafire/__init__.py         |  2 --
 komikku/servers/mangafreak/__init__.py        |  9 +++---
 komikku/servers/mangahere/__init__.py         |  1 -
 komikku/servers/mangakawaii/__init__.py       | 13 ++++-----
 komikku/servers/mangamana/__init__.py         | 11 ++++---
 komikku/servers/manganelo/__init__.py         |  3 +-
 komikku/servers/mangatube/__init__.py         | 11 ++++---
 komikku/servers/mangaworld/__init__.py        |  1 -
 komikku/servers/manhwahentai/__init__.py      |  3 +-
 komikku/servers/multi/heancms/__init__.py     | 13 ++++-----
 komikku/servers/multi/keyoapp/__init__.py     | 11 ++++---
 komikku/servers/multi/madara/__init__.py      | 16 +++++-----
 .../servers/multi/manga_stream/__init__.py    | 13 ++++-----
 komikku/servers/multi/paprika/__init__.py     | 13 ++++-----
 komikku/servers/multi/peachscan/__init__.py   | 13 ++++-----
 komikku/servers/multi/wpcomics/__init__.py    | 13 ++++-----
 komikku/servers/nhentai/__init__.py           |  9 +++---
 komikku/servers/phenixscans/__init__.py       | 13 ++++-----
 komikku/servers/raijinscan/__init__.py        | 13 ++++-----
 komikku/servers/rawmanga/__init__.py          |  7 ++---
 komikku/servers/readcomiconline/__init__.py   | 11 ++++---
 komikku/servers/remanga/__init__.py           | 13 ++++-----
 komikku/servers/scanmanga/__init__.py         | 11 ++++---
 komikku/servers/teamx/__init__.py             | 11 ++++---
 komikku/trackers/anilist/__init__.py          |  1 -
 komikku/trackers/myanimelist/__init__.py      |  1 -
 komikku/utils.py                              |  4 ---
 po/POTFILES.in                                |  1 -
 38 files changed, 127 insertions(+), 219 deletions(-)

diff --git a/data/ui/preferences.blp b/data/ui/preferences.blp
index 802ffbc6..a4602f75 100644
--- a/data/ui/preferences.blp
+++ b/data/ui/preferences.blp
@@ -339,25 +339,6 @@ template $PreferencesDialog : Adw.PreferencesDialog {
       }
     }
 
-    Adw.PreferencesGroup {
-      title: _("WebView");
-
-      Adw.ActionRow clear_webview_data_actionrow {
-        title: _("Clear Data");
-        activatable: false;
-
-        [suffix]
-        Button clear_webview_data_button {
-          icon-name: "user-trash-symbolic";
-          tooltip-text: _("Clear");
-          valign: center;
-          styles [
-            'flat'
-          ]
-        }
-      }
-    }
-
     Adw.PreferencesGroup {
       title: _("Servers Modules");
 
diff --git a/komikku/application.py b/komikku/application.py
index 879c5872..8ec2fe51 100644
--- a/komikku/application.py
+++ b/komikku/application.py
@@ -44,7 +44,6 @@ from komikku.servers.utils import get_allowed_servers_list
 from komikku.support import SupportPage
 from komikku.trackers import Trackers
 from komikku.updater import Updater
-from komikku.webview import WebviewPage
 
 
 class Application(Adw.Application):
@@ -290,7 +289,6 @@ class ApplicationWindow(Adw.ApplicationWindow):
         self.explorer = Explorer(self)
         self.history = HistoryPage(self)
         self.support = SupportPage(self)
-        self.webview = WebviewPage(self)
 
         # Init dialogs
         self.preferences = PreferencesDialog(self)
diff --git a/komikku/consts.py b/komikku/consts.py
index 68dd988e..398ea875 100644
--- a/komikku/consts.py
+++ b/komikku/consts.py
@@ -136,7 +136,6 @@ CREDITS = dict(
 
 RELEASE_NOTES = """
 <ul>
-    <li>[Preferences] Advanced: Add ability to clear WebView data</li>
     <li>[Servers] Added Anime-Sama (FR)</li>
     <li>[Servers] Added Aurora Scans (EN)</li>
     <li>[Servers] Added Hijala Scans (EN)</li>
diff --git a/komikku/debug_info.py b/komikku/debug_info.py
index 31d17994..72118825 100644
--- a/komikku/debug_info.py
+++ b/komikku/debug_info.py
@@ -10,14 +10,12 @@ gi.require_version('Adw', '1')
 gi.require_version('GdkPixbuf', '2.0')
 gi.require_version('Gtk', '4.0')
 gi.require_version('Soup', '3.0')
-gi.require_version('WebKit', '6.0')
 
 from gi.repository import Adw
 from gi.repository import GdkPixbuf
 from gi.repository import GLib
 from gi.repository import Gtk
 from gi.repository import Soup
-from gi.repository import WebKit
 
 from komikku.models.database import VERSION as DB_VERSION
 from komikku.utils import check_cmdline_tool
@@ -113,7 +111,6 @@ class DebugInfo:
         info += f'- GLib: {GLib.MAJOR_VERSION}.{GLib.MINOR_VERSION}.{GLib.MICRO_VERSION}\n'
         info += f'- GTK: {Gtk.MAJOR_VERSION}.{Gtk.MINOR_VERSION}.{Gtk.MICRO_VERSION}\n'
         info += f'- Adwaita: {Adw.VERSION_S}\n'
-        info += f'- WebKitGTK: {WebKit.MAJOR_VERSION}.{WebKit.MINOR_VERSION}.{WebKit.MICRO_VERSION}\n'
         info += f'- Soup: {Soup.MAJOR_VERSION}.{Soup.MINOR_VERSION}.{Soup.MICRO_VERSION}\n'
         info += '\n'
 
@@ -121,7 +118,6 @@ class DebugInfo:
         info += f'- GLib: {GLib.glib_version[0]}.{GLib.glib_version[1]}.{GLib.glib_version[2]}\n'
         info += f'- GTK: {Gtk.get_major_version()}.{Gtk.get_minor_version()}.{Gtk.get_micro_version()}\n'
         info += f'- Adwaita: {Adw.get_major_version()}.{Adw.get_minor_version()}.{Adw.get_micro_version()}\n'
-        info += f'- WebKitGTK: {WebKit.get_major_version()}.{WebKit.get_minor_version()}.{WebKit.get_micro_version()}\n'
         info += f'- Soup: {Soup.get_major_version()}.{Soup.get_minor_version()}.{Soup.get_micro_version()}\n'
         info += '\n'
 
diff --git a/komikku/explorer/search/search_global.py b/komikku/explorer/search/search_global.py
index c974bb72..ec442536 100644
--- a/komikku/explorer/search/search_global.py
+++ b/komikku/explorer/search/search_global.py
@@ -58,7 +58,6 @@ class ExplorerSearchStackPageSearchGlobal(ExplorerSearchStackPage):
                 return True
 
             self.status = 'cancelling'
-            self.window.webview.cancel_challengers(self.server_ids, context='search')
 
         GLib.idle_add(do_cancel)
 
diff --git a/komikku/preferences.py b/komikku/preferences.py
index a6c22863..4625193c 100644
--- a/komikku/preferences.py
+++ b/komikku/preferences.py
@@ -17,7 +17,6 @@ from komikku.servers.utils import get_server_main_id_by_id
 from komikku.servers.utils import get_servers_list
 from komikku.utils import folder_size
 from komikku.utils import get_cached_data_dir
-from komikku.utils import get_webview_data_dir
 from komikku.utils import html_escape
 
 
@@ -59,8 +58,6 @@ class PreferencesDialog(Adw.PreferencesDialog):
     clear_cached_data_actionrow = Gtk.Template.Child('clear_cached_data_actionrow')
     clear_cached_data_button = Gtk.Template.Child('clear_cached_data_button')
     clear_cached_data_on_app_close_switch = Gtk.Template.Child('clear_cached_data_on_app_close_switch')
-    clear_webview_data_actionrow = Gtk.Template.Child('clear_webview_data_actionrow')
-    clear_webview_data_button = Gtk.Template.Child('clear_webview_data_button')
     external_servers_modules_switch = Gtk.Template.Child('external_servers_modules_switch')
     credentials_storage_plaintext_fallback_switch = Gtk.Template.Child('credentials_storage_plaintext_fallback_switch')
     disable_animations_switch = Gtk.Template.Child('disable_animations_switch')
@@ -151,21 +148,6 @@ class PreferencesDialog(Adw.PreferencesDialog):
     def on_clear_cached_data_on_app_close_changed(self, switch_button, _gparam):
         self.settings.clear_cached_data_on_app_close = switch_button.get_active()
 
-    def on_clear_webview_data_clicked(self, _button):
-        # Clear WebView data
-
-        def confirm_callback():
-            self.window.webview.clear_data()
-            self.update_webview_data_size()
-
-        self.window.confirm(
-            _('Clear?'),
-            _('Are you sure you want to clear WebView data (cache, storage, cookies)?'),
-            _('Clear'),
-            confirm_callback,
-            confirm_appearance=Adw.ResponseAppearance.DESTRUCTIVE
-        )
-
     def on_credentials_storage_plaintext_fallback_changed(self, switch_button, _gparam):
         self.settings.credentials_storage_plaintext_fallback = switch_button.get_active()
 
@@ -456,9 +438,6 @@ class PreferencesDialog(Adw.PreferencesDialog):
         self.clear_cached_data_on_app_close_switch.set_active(self.settings.clear_cached_data_on_app_close)
         self.clear_cached_data_on_app_close_switch.connect('notify::active', self.on_clear_cached_data_on_app_close_changed)
 
-        # Clear webview data
-        self.clear_webview_data_button.connect('clicked', self.on_clear_webview_data_clicked)
-
         # External servers modules
         self.external_servers_modules_switch.set_active(self.settings.external_servers_modules)
         self.external_servers_modules_switch.connect('notify::active', self.on_external_servers_modules_changed)
@@ -483,7 +462,6 @@ class PreferencesDialog(Adw.PreferencesDialog):
         self.clamp_size_adjustment.set_upper(self.window.monitor.props.geometry.width)
 
         self.update_cached_data_size()
-        self.update_webview_data_size()
 
         self.set_search_enabled(True)
         self.present(self.window)
@@ -491,10 +469,6 @@ class PreferencesDialog(Adw.PreferencesDialog):
     def update_cached_data_size(self):
         self.clear_cached_data_actionrow.set_subtitle(folder_size(get_cached_data_dir()) or '-')
 
-    def update_webview_data_size(self):
-        size = folder_size(get_webview_data_dir(), exclude='cookies.sqlite')
-        self.clear_webview_data_actionrow.set_subtitle(size)
-
 
 @Gtk.Template.from_resource('/info/febvre/Komikku/ui/preferences_servers_languages.ui')
 class PreferencesServersLanguagesSubPage(Adw.NavigationPage):
@@ -802,9 +776,6 @@ class TrackerRow(Adw.ActionRow):
             elif error == 'load_failed':
                 self.window.preferences.add_toast(Adw.Toast.new(_('Failed to request client access')))
 
-            elif error == 'locked':
-                self.window.preferences.add_toast(Adw.Toast.new(_('Webview is currently in used. Please retry later.')))
-
             elif error == 'canceled':
                 self.window.preferences.add_toast(Adw.Toast.new(error))
 
diff --git a/komikku/servers/comichubfree/__init__.py b/komikku/servers/comichubfree/__init__.py
index 7b4012de..4eb58099 100644
--- a/komikku/servers/comichubfree/__init__.py
+++ b/komikku/servers/comichubfree/__init__.py
@@ -12,7 +12,6 @@ from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import get_response_elapsed
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 # Similar to dead server comicextra
 
@@ -35,7 +34,7 @@ class Comichubfree(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns comic data by scraping manga HTML page content
@@ -131,7 +130,7 @@ class Comichubfree(Server):
 
         return list(reversed(chapters))
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns comic chapter data
@@ -156,7 +155,7 @@ class Comichubfree(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -186,7 +185,7 @@ class Comichubfree(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns daily updates
@@ -219,7 +218,7 @@ class Comichubfree(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns popular comics
@@ -254,7 +253,7 @@ class Comichubfree(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session.get(
             self.search_url,
diff --git a/komikku/servers/goldenmangas/__init__.py b/komikku/servers/goldenmangas/__init__.py
index 900b803e..591a5877 100644
--- a/komikku/servers/goldenmangas/__init__.py
+++ b/komikku/servers/goldenmangas/__init__.py
@@ -7,7 +7,6 @@ from bs4 import BeautifulSoup
 from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
 
 
 class Goldenmangas(Server):
@@ -25,7 +24,7 @@ class Goldenmangas(Server):
     chapter_url = base_url + '/mangas/{0}/{1}'
     image_url = base_url + '/mm-admin/uploads/mangas/{0}/{1}/{2}'
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -103,7 +102,7 @@ class Goldenmangas(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -152,7 +151,7 @@ class Goldenmangas(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         r = self.session_get(self.base_url)
         if r.status_code != 200:
@@ -169,7 +168,7 @@ class Goldenmangas(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, types=None, statuses=None):
         r = self.session_get(self.base_url)
         if r.status_code != 200:
@@ -186,7 +185,7 @@ class Goldenmangas(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, types=None, statuses=None, orderby=None):
         r = self.session_get(self.search_url, params=dict(busca=term))
         if r.status_code != 200:
diff --git a/komikku/servers/japscan/__init__.py b/komikku/servers/japscan/__init__.py
index 65eb4391..c5939b86 100644
--- a/komikku/servers/japscan/__init__.py
+++ b/komikku/servers/japscan/__init__.py
@@ -10,8 +10,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import search_duckduckgo
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
-from komikku.webview import get_page_html
 
 logger = logging.getLogger('komikku.servers.japscan')
 
@@ -41,7 +39,7 @@ class Japscan(Server):
     def get_manga_initial_data_from_url(cls, url):
         return dict(slug=url.split('/')[-2])
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -131,7 +129,7 @@ class Japscan(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url, decode=True):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -168,7 +166,7 @@ class Japscan(Server):
 
         raise requests.exceptions.RequestException
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -208,7 +206,7 @@ class Japscan(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns recent manga
@@ -233,7 +231,7 @@ class Japscan(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns TOP manga
@@ -258,7 +256,7 @@ class Japscan(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_post(self.api_search_url, data=dict(search=term), headers={
             'X-Requested-With': 'XMLHttpRequest',
diff --git a/komikku/servers/mangademon/__init__.py b/komikku/servers/mangademon/__init__.py
index 3352e48f..eb50fa82 100644
--- a/komikku/servers/mangademon/__init__.py
+++ b/komikku/servers/mangademon/__init__.py
@@ -14,7 +14,6 @@ from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import get_response_elapsed
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 SEARCH_MAX_PAGES = 2
 
@@ -35,7 +34,7 @@ class Mangademon(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -114,7 +113,7 @@ class Mangademon(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -174,7 +173,7 @@ class Mangademon(Server):
         _id, slug = slug.split('_')
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
@@ -231,7 +230,7 @@ class Mangademon(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns top views
@@ -273,7 +272,7 @@ class Mangademon(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.search_url,
diff --git a/komikku/servers/mangafire/__init__.py b/komikku/servers/mangafire/__init__.py
index afaecbc4..9318fe2f 100644
--- a/komikku/servers/mangafire/__init__.py
+++ b/komikku/servers/mangafire/__init__.py
@@ -12,8 +12,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import get_page_html
-from komikku.webview import get_page_resources
 
 LANGUAGES_CODES = dict(
     en='en',
diff --git a/komikku/servers/mangafreak/__init__.py b/komikku/servers/mangafreak/__init__.py
index 054f43aa..fd4131cb 100644
--- a/komikku/servers/mangafreak/__init__.py
+++ b/komikku/servers/mangafreak/__init__.py
@@ -9,7 +9,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 logger = logging.getLogger('komikku.servers.mangafreak')
 
@@ -30,7 +29,7 @@ class Mangafreak(Server):
     chapter_url = base_url + '/{chapter_slug}'
     image_url = 'https://images.mangafreak.me/mangas/{slug}'
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -163,7 +162,7 @@ class Mangafreak(Server):
         """
         return self.manga_url.format(slug=slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest released
@@ -190,7 +189,7 @@ class Mangafreak(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns featured manga list
@@ -217,7 +216,7 @@ class Mangafreak(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(self.search_url.format(term=term))
         if r.status_code != 200:
diff --git a/komikku/servers/mangahere/__init__.py b/komikku/servers/mangahere/__init__.py
index 46bb15b7..0f5e3b00 100644
--- a/komikku/servers/mangahere/__init__.py
+++ b/komikku/servers/mangahere/__init__.py
@@ -14,7 +14,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import eval_js
 
 
 class Mangahere(Server):
diff --git a/komikku/servers/mangakawaii/__init__.py b/komikku/servers/mangakawaii/__init__.py
index db77e958..b1a99519 100644
--- a/komikku/servers/mangakawaii/__init__.py
+++ b/komikku/servers/mangakawaii/__init__.py
@@ -14,7 +14,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 SERVER_NAME = 'MangaKawaii'
 
@@ -86,7 +85,7 @@ class Mangakawaii(Server):
 
             self.session.headers.update({'User-Agent': USER_AGENT})
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @set_lang
     def get_manga_data(self, initial_data):
         """
@@ -202,7 +201,7 @@ class Mangakawaii(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -292,7 +291,7 @@ class Mangakawaii(Server):
 
         return chapters
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -369,7 +368,7 @@ class Mangakawaii(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @set_lang
     def get_latest_updates(self):
         """
@@ -377,7 +376,7 @@ class Mangakawaii(Server):
         """
         return self.get_manga_list('latest')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @set_lang
     def get_most_populars(self):
         """
@@ -385,7 +384,7 @@ class Mangakawaii(Server):
         """
         return self.get_manga_list('populars')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @set_lang
     def search(self, term):
         r = self.session_get(
diff --git a/komikku/servers/mangamana/__init__.py b/komikku/servers/mangamana/__init__.py
index 112af834..1c159dda 100644
--- a/komikku/servers/mangamana/__init__.py
+++ b/komikku/servers/mangamana/__init__.py
@@ -14,7 +14,6 @@ from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import get_soup_element_inner_text
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 RE_CHAPTER_PAGES = r'.*pages\s+=\s+([a-zA-Z0-9":,-_.\[\]{}]+);.*'
 RE_CHAPTER_PAGES_CDN = r'.*var\s+cdn\s+=\s+"([a-z1-9]+[^"])";.*'
@@ -76,7 +75,7 @@ class Mangamana(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -146,7 +145,7 @@ class Mangamana(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chpater HTML page content
@@ -259,15 +258,15 @@ class Mangamana(Server):
 
         return result
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self, status=None):
         return self.get_manga_list('updated_at', status)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, status=None):
         return self.get_manga_list('score', status)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @get_data
     def search(self, term, status=None):
         r = self.session_get(
diff --git a/komikku/servers/manganelo/__init__.py b/komikku/servers/manganelo/__init__.py
index 844c2260..da0b727e 100644
--- a/komikku/servers/manganelo/__init__.py
+++ b/komikku/servers/manganelo/__init__.py
@@ -11,7 +11,6 @@ from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import get_soup_element_inner_text
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 # NOTE: https://mangakakalot.gg seems to be a clone (same IP)
 # https://www.mangabats.com
@@ -217,7 +216,7 @@ class Manganelo(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.search_url,
diff --git a/komikku/servers/mangatube/__init__.py b/komikku/servers/mangatube/__init__.py
index ff82a218..f09fe6b8 100644
--- a/komikku/servers/mangatube/__init__.py
+++ b/komikku/servers/mangatube/__init__.py
@@ -16,7 +16,6 @@ from komikku.consts import USER_AGENT
 from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
 
 logger = logging.getLogger(__name__)
 
@@ -163,7 +162,7 @@ class Mangatube(Server):
             self.session = requests.Session()
             self.session.headers.update({'user-agent': USER_AGENT})
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @get_data
     def get_manga_data(self, initial_data):
         """
@@ -260,7 +259,7 @@ class Mangatube(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @get_data
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
@@ -320,16 +319,16 @@ class Mangatube(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     @get_data
     def get_latest_updates(self, **kwargs):
         return self.data['latest_updates'] if self.data else None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, type=None, mature=None):
         return self.search(populars=True, type=type, mature=mature)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term=None, populars=False, type=None, mature=None):
         params = {
             'year[]': [1970, datetime.date.today().year],
diff --git a/komikku/servers/mangaworld/__init__.py b/komikku/servers/mangaworld/__init__.py
index 96dcb11e..517d26dd 100644
--- a/komikku/servers/mangaworld/__init__.py
+++ b/komikku/servers/mangaworld/__init__.py
@@ -13,7 +13,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import get_page_html
 
 
 def get_mwcookie(func):
diff --git a/komikku/servers/manhwahentai/__init__.py b/komikku/servers/manhwahentai/__init__.py
index 55b6a70d..ea471aa6 100644
--- a/komikku/servers/manhwahentai/__init__.py
+++ b/komikku/servers/manhwahentai/__init__.py
@@ -7,7 +7,6 @@ import json
 from bs4 import BeautifulSoup
 
 from komikku.servers.multi.madara import Madara
-from komikku.webview import CompleteChallenge
 from komikku.utils import get_buffer_mime_type
 
 
@@ -34,7 +33,7 @@ class Manhwahentai(Madara):
     result_name_slug_selector = '.post-title a'
     result_cover_selector = '.item-thumb img'
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
diff --git a/komikku/servers/multi/heancms/__init__.py b/komikku/servers/multi/heancms/__init__.py
index a623fd01..a34dff2e 100644
--- a/komikku/servers/multi/heancms/__init__.py
+++ b/komikku/servers/multi/heancms/__init__.py
@@ -28,7 +28,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import get_response_elapsed
-from komikku.webview import CompleteChallenge
 
 logger = logging.getLogger('komikku.servers.multi.heancms')
 
@@ -87,7 +86,7 @@ class HeanCMS(Server):
             self.session = requests.Session()
             self.session.headers.update({'User-Agent': USER_AGENT})
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data via API request
@@ -142,7 +141,7 @@ class HeanCMS(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -233,7 +232,7 @@ class HeanCMS(Server):
 
         return list(reversed(chapters))
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -263,7 +262,7 @@ class HeanCMS(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
@@ -308,13 +307,13 @@ class HeanCMS(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns most popular mangas
         """
         return self.get_manga_list(orderby='popular')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         return self.get_manga_list(term=term)
diff --git a/komikku/servers/multi/keyoapp/__init__.py b/komikku/servers/multi/keyoapp/__init__.py
index 4f9ad0e6..c507ce18 100644
--- a/komikku/servers/multi/keyoapp/__init__.py
+++ b/komikku/servers/multi/keyoapp/__init__.py
@@ -17,7 +17,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 logger = logging.getLogger(__name__)
 
@@ -51,7 +50,7 @@ class Keyoapp(Server):
             self.session = requests.Session()
             self.session.headers.update({'User-Agent': USER_AGENT})
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -144,7 +143,7 @@ class Keyoapp(Server):
 
         return chapters
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -211,7 +210,7 @@ class Keyoapp(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
@@ -243,7 +242,7 @@ class Keyoapp(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns most popular manga
@@ -270,7 +269,7 @@ class Keyoapp(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.search_url,
diff --git a/komikku/servers/multi/madara/__init__.py b/komikku/servers/multi/madara/__init__.py
index c4edb973..16e7acde 100644
--- a/komikku/servers/multi/madara/__init__.py
+++ b/komikku/servers/multi/madara/__init__.py
@@ -49,7 +49,7 @@ from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import get_soup_element_inner_text
 from komikku.servers.utils import remove_emoji_from_string
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
+
 
 logger = logging.getLogger('komikku.servers.madara')
 
@@ -110,7 +110,7 @@ class Madara(Server):
 
         return None, None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -264,7 +264,7 @@ class Madara(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -306,7 +306,7 @@ class Madara(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -348,7 +348,7 @@ class Madara(Server):
         """
         return self.search('', orderby='populars')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, orderby=None):
         data = {
             'action': 'madara_load_more',
@@ -436,21 +436,21 @@ class Madara2(Madara):
         if Settings.instance:
             self.filters[0]['default'] = Settings.get_default().nsfw_content
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self, nsfw):
         """
         Returns list of latest updates manga
         """
         return self.search(None, nsfw=nsfw, orderby='latest')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, nsfw):
         """
         Returns list of most viewed manga
         """
         return self.search(None, nsfw=nsfw, orderby='populars')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, nsfw, orderby=None):
         params = {
             's': term or '',
diff --git a/komikku/servers/multi/manga_stream/__init__.py b/komikku/servers/multi/manga_stream/__init__.py
index f5afdb2e..1a96df8d 100644
--- a/komikku/servers/multi/manga_stream/__init__.py
+++ b/komikku/servers/multi/manga_stream/__init__.py
@@ -38,7 +38,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import get_soup_element_inner_text
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
 
 
 class MangaStream(Server):
@@ -102,7 +101,7 @@ class MangaStream(Server):
             self.session = requests.Session()
             self.session.headers.update({'User-Agent': USER_AGENT})
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -258,7 +257,7 @@ class MangaStream(Server):
 
         return chapters
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -321,7 +320,7 @@ class MangaStream(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -388,14 +387,14 @@ class MangaStream(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self, type):
         return self.get_manga_list(type=type, orderby='update')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, type):
         return self.get_manga_list(type=type, orderby='popular')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, type):
         return self.get_manga_list(title=term, type=type)
diff --git a/komikku/servers/multi/paprika/__init__.py b/komikku/servers/multi/paprika/__init__.py
index a414db6d..13d749ec 100644
--- a/komikku/servers/multi/paprika/__init__.py
+++ b/komikku/servers/multi/paprika/__init__.py
@@ -12,7 +12,6 @@ from komikku.consts import USER_AGENT
 from komikku.servers import Server
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 
 class Paprika(Server):
@@ -42,7 +41,7 @@ class Paprika(Server):
         if self.chapter_url is None:
             self.chapter_url = self.base_url + '/chapter/{0}'
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -129,7 +128,7 @@ class Paprika(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         r = self.session_get(self.chapter_url.format(chapter_slug))
         if r.status_code != 200:
@@ -148,7 +147,7 @@ class Paprika(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -178,7 +177,7 @@ class Paprika(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         r = self.session_get(self.latest_updates_url)
         if r.status_code != 200:
@@ -186,7 +185,7 @@ class Paprika(Server):
 
         return self.parse_manga_list(r.text)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         r = self.session_get(self.most_populars_url)
         if r.status_code != 200:
@@ -209,7 +208,7 @@ class Paprika(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.search_url,
diff --git a/komikku/servers/multi/peachscan/__init__.py b/komikku/servers/multi/peachscan/__init__.py
index f2f0080c..8cd5638d 100644
--- a/komikku/servers/multi/peachscan/__init__.py
+++ b/komikku/servers/multi/peachscan/__init__.py
@@ -25,7 +25,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import get_soup_element_inner_text
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
 
 RE_ZIP_IMAGES = re.compile(r'base64,([a-zA-Z0-9+=\/\n]*)')
 
@@ -59,7 +58,7 @@ class Peachscan(Server):
         if self.image_url is None:
             self.image_url = self.base_url + '{0}#page'
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -141,7 +140,7 @@ class Peachscan(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         r = self.session_get(self.chapter_url.format(manga_slug, chapter_slug))
         if r.status_code != 200:
@@ -178,7 +177,7 @@ class Peachscan(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -253,7 +252,7 @@ class Peachscan(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         r = self.session_get(self.latest_updates_url)
         if r.status_code != 200:
@@ -274,7 +273,7 @@ class Peachscan(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         r = self.session_get(self.most_populars_url)
         if r.status_code != 200:
@@ -295,7 +294,7 @@ class Peachscan(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.search_url,
diff --git a/komikku/servers/multi/wpcomics/__init__.py b/komikku/servers/multi/wpcomics/__init__.py
index cd7fa636..fe672304 100644
--- a/komikku/servers/multi/wpcomics/__init__.py
+++ b/komikku/servers/multi/wpcomics/__init__.py
@@ -19,7 +19,6 @@ from komikku.servers.utils import convert_date_string
 from komikku.servers.utils import get_soup_element_inner_text
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 # WPComics Wordpress theme
 
@@ -53,7 +52,7 @@ class WPComics(Server):
                 'User-Agent': USER_AGENT,
             }
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns comic data by scraping manga HTML page content
@@ -148,7 +147,7 @@ class WPComics(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns comic chapter data
@@ -177,7 +176,7 @@ class WPComics(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -207,7 +206,7 @@ class WPComics(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns daily updates
@@ -244,7 +243,7 @@ class WPComics(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns popular comics
@@ -279,7 +278,7 @@ class WPComics(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session.get(
             self.search_url,
diff --git a/komikku/servers/nhentai/__init__.py b/komikku/servers/nhentai/__init__.py
index 3c40da04..91c46a0a 100644
--- a/komikku/servers/nhentai/__init__.py
+++ b/komikku/servers/nhentai/__init__.py
@@ -8,7 +8,6 @@ import json
 from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
 
 IMAGES_EXTS = dict(g='gif', j='jpg', p='png', w='webp')
 
@@ -31,7 +30,7 @@ class Nhentai(Server):
     manga_url = base_url + '/g/{0}'
     page_image_url = 'https://i.nhentai.net/galleries/{0}/{1}'
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -90,7 +89,7 @@ class Nhentai(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -177,14 +176,14 @@ class Nhentai(Server):
 
         return None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns most popular mangas (bayesian rating)
         """
         return self._search_common({'q': 'language:' + self.lang_code, 'sort': 'popular'})
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         term = term + ' language:' + self.lang_code
         return self._search_common({'q': term})
diff --git a/komikku/servers/phenixscans/__init__.py b/komikku/servers/phenixscans/__init__.py
index 03610f14..99732d71 100644
--- a/komikku/servers/phenixscans/__init__.py
+++ b/komikku/servers/phenixscans/__init__.py
@@ -8,7 +8,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 
 class Phenixscans(Server):
@@ -49,7 +48,7 @@ class Phenixscans(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data using API
@@ -96,7 +95,7 @@ class Phenixscans(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         r = self.session_get(self.api_chapter_url.format(manga_slug, chapter_slug))
         if r.status_code != 200:
@@ -116,7 +115,7 @@ class Phenixscans(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -168,18 +167,18 @@ class Phenixscans(Server):
 
         return result
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self, type=None):
         return self.get_manga_list(orderby='updatedAt', type=type)
 
     def get_manga_url(self, slug, url):
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, type=None):
         return self.get_manga_list(orderby='rating', type=type)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, type=None):
         # Filtering by type is not available in search endpoint
         r = self.session_get(
diff --git a/komikku/servers/raijinscan/__init__.py b/komikku/servers/raijinscan/__init__.py
index 2e1cd0ac..3234e6df 100644
--- a/komikku/servers/raijinscan/__init__.py
+++ b/komikku/servers/raijinscan/__init__.py
@@ -11,7 +11,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 
 class Raijinscan(Server):
@@ -57,7 +56,7 @@ class Raijinscan(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -130,7 +129,7 @@ class Raijinscan(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -154,7 +153,7 @@ class Raijinscan(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -178,7 +177,7 @@ class Raijinscan(Server):
             name=page['image'].split('/')[-1],
         )
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self, statuses=None, types=None):
         """
         Returns recent mangas
@@ -191,14 +190,14 @@ class Raijinscan(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self, statuses=None, types=None):
         """
         Returns most viewed mangas
         """
         return self.search(None, statuses=statuses, types=types, orderby='most_viewed')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, statuses=None, types=None, orderby=None):
         params = {
             'post_type': 'wp-manga',
diff --git a/komikku/servers/rawmanga/__init__.py b/komikku/servers/rawmanga/__init__.py
index 1cd0f596..e5afcbf0 100644
--- a/komikku/servers/rawmanga/__init__.py
+++ b/komikku/servers/rawmanga/__init__.py
@@ -8,7 +8,6 @@ from komikku.servers.multi.manga_stream import MangaStream
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 
 class Rawmanga(MangaStream):
@@ -56,7 +55,7 @@ class Rawmanga(MangaStream):
 
         return chapters
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -89,7 +88,7 @@ class Rawmanga(MangaStream):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -130,7 +129,7 @@ class Rawmanga(MangaStream):
         """
         return self.search('', type, orderby='populars')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term, type, orderby=None):
         if orderby:
             data = dict(
diff --git a/komikku/servers/readcomiconline/__init__.py b/komikku/servers/readcomiconline/__init__.py
index 6bd17a41..62639241 100644
--- a/komikku/servers/readcomiconline/__init__.py
+++ b/komikku/servers/readcomiconline/__init__.py
@@ -19,7 +19,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 logger = logging.getLogger('komikku.servers.readcomiconline')
 
@@ -46,7 +45,7 @@ class Readcomiconline(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns comic data by scraping manga HTML page content
@@ -129,7 +128,7 @@ class Readcomiconline(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns comic chapter data
@@ -285,20 +284,20 @@ class Readcomiconline(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
         """
         return self.get_manga_list(orderby='latest')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns most popular comics
         """
         return self.get_manga_list(orderby='populars')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         return self.get_manga_list(term=term)
diff --git a/komikku/servers/remanga/__init__.py b/komikku/servers/remanga/__init__.py
index d9aadb98..a37105db 100644
--- a/komikku/servers/remanga/__init__.py
+++ b/komikku/servers/remanga/__init__.py
@@ -11,7 +11,6 @@ from komikku.servers import Server
 from komikku.servers.utils import convert_date_string
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 logger = logging.getLogger('komikku.servers.remanga')
 
@@ -37,7 +36,7 @@ class Remanga(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data from API
@@ -134,7 +133,7 @@ class Remanga(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data from API
@@ -170,7 +169,7 @@ class Remanga(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_page_image(self, manga_slug, manga_name, chapter_slug, page):
         """
         Returns chapter page scan (image) content
@@ -227,21 +226,21 @@ class Remanga(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
         """
         return self.get_manga_list(orderby='latest')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns most popular mangas
         """
         return self.get_manga_list(orderby='populars')
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.api_search_url,
diff --git a/komikku/servers/scanmanga/__init__.py b/komikku/servers/scanmanga/__init__.py
index 32812a9d..4e4ba96a 100644
--- a/komikku/servers/scanmanga/__init__.py
+++ b/komikku/servers/scanmanga/__init__.py
@@ -6,7 +6,6 @@ from bs4 import BeautifulSoup
 
 from komikku.servers import Server
 from komikku.utils import get_buffer_mime_type
-from komikku.webview import CompleteChallenge
 
 
 class Scanmanga(Server):
@@ -38,7 +37,7 @@ class Scanmanga(Server):
             slug=url.split('/')[-1].replace('.html', ''),
         )
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -109,7 +108,7 @@ class Scanmanga(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -194,7 +193,7 @@ class Scanmanga(Server):
         """
         return self.manga_url.format(url)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
@@ -219,7 +218,7 @@ class Scanmanga(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns list of top manga
@@ -249,7 +248,7 @@ class Scanmanga(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(
             self.api_search_url,
diff --git a/komikku/servers/teamx/__init__.py b/komikku/servers/teamx/__init__.py
index a09c926e..bdcdc2ec 100644
--- a/komikku/servers/teamx/__init__.py
+++ b/komikku/servers/teamx/__init__.py
@@ -7,7 +7,6 @@ from bs4 import BeautifulSoup
 from komikku.servers import Server
 from komikku.utils import get_buffer_mime_type
 from komikku.utils import is_number
-from komikku.webview import CompleteChallenge
 
 
 class Teamx(Server):
@@ -26,7 +25,7 @@ class Teamx(Server):
     def __init__(self):
         self.session = None
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_data(self, initial_data):
         """
         Returns manga data by scraping manga HTML page content
@@ -114,7 +113,7 @@ class Teamx(Server):
 
         return data
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_manga_chapter_data(self, manga_slug, manga_name, chapter_slug, chapter_url):
         """
         Returns manga chapter data by scraping chapter HTML page content
@@ -171,7 +170,7 @@ class Teamx(Server):
         """
         return self.manga_url.format(slug)
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_latest_updates(self):
         """
         Returns latest updates
@@ -192,7 +191,7 @@ class Teamx(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def get_most_populars(self):
         """
         Returns most viewed mangas
@@ -213,7 +212,7 @@ class Teamx(Server):
 
         return results
 
-    @CompleteChallenge()
+#    @CompleteChallenge()
     def search(self, term):
         r = self.session_get(self.search_url, params=dict(keyword=term))
         if r.status_code != 200:
diff --git a/komikku/trackers/anilist/__init__.py b/komikku/trackers/anilist/__init__.py
index 57c0ce53..cea98c99 100644
--- a/komikku/trackers/anilist/__init__.py
+++ b/komikku/trackers/anilist/__init__.py
@@ -10,7 +10,6 @@ import requests
 
 from komikku.consts import USER_AGENT
 from komikku.trackers import Tracker
-from komikku.webview import get_tracker_access_token
 
 logger = logging.getLogger(__name__)
 
diff --git a/komikku/trackers/myanimelist/__init__.py b/komikku/trackers/myanimelist/__init__.py
index e45fe9a5..b471fe49 100644
--- a/komikku/trackers/myanimelist/__init__.py
+++ b/komikku/trackers/myanimelist/__init__.py
@@ -12,7 +12,6 @@ import requests
 
 from komikku.consts import USER_AGENT
 from komikku.trackers import Tracker
-from komikku.webview import get_tracker_access_token
 
 # https://myanimelist.net/apiconfig/references/api/v2
 
diff --git a/komikku/utils.py b/komikku/utils.py
index ad0a3d26..09ea6785 100644
--- a/komikku/utils.py
+++ b/komikku/utils.py
@@ -303,10 +303,6 @@ def get_response_elapsed(r):
 
 
 @cache
-def get_webview_data_dir():
-    return os.path.join(get_cache_dir(), 'webview')
-
-
 def html_escape(s):
     return html.escape(html.unescape(s), quote=False)
 
diff --git a/po/POTFILES.in b/po/POTFILES.in
index b09516ff..d99e8b67 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -73,4 +73,3 @@ komikku/servers/weebcentral/__init__.py
 komikku/trackers/__init__.py
 komikku/updater.py
 komikku/utils.py
-komikku/webview.py
