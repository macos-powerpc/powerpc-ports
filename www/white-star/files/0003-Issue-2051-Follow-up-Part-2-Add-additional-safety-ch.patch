From ef69c6a8af0034284d70f12b2c0db823480b9690 Mon Sep 17 00:00:00 2001
From: Brian Smith <brian@dbsoft.org>
Date: Wed, 7 Feb 2024 12:17:32 -0600
Subject: [PATCH 03/14] Issue #2051 - Follow-up Part 2: Add additional safety
 checks in the older font code.

---
 gfx/2d/ScaledFontMac.cpp             |  2 +-
 gfx/thebes/gfxMacPlatformFontList.mm | 20 +++++++++++---------
 2 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/gfx/2d/ScaledFontMac.cpp b/gfx/2d/ScaledFontMac.cpp
index a9aec4fcba..4243dc5299 100644
--- a/gfx/2d/ScaledFontMac.cpp
+++ b/gfx/2d/ScaledFontMac.cpp
@@ -98,7 +98,7 @@ ScaledFontMac::GetPathForGlyphs(const GlyphBuffer &aBuffer, const DrawTarget *aT
 #if !defined(MAC_OS_X_VERSION_10_5) || (MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_5)
           CGPathRef glyphPath = ::CGFontGetGlyphPath(mFont, &flip, 0, aBuffer.mGlyphs[i].mIndex);
 #else
-          CTFontRef ctFont = CTFontCreateWithGraphicsFont(mFont, 0, NULL, NULL);
+          CTFontRef ctFont = CTFontCreateWithGraphicsFont(mFont, 1.0, NULL, NULL);
           CGPathRef glyphPath = CTFontCreatePathForGlyph(ctFont, aBuffer.mGlyphs[i].mIndex, &flip);
 #endif
 
diff --git a/gfx/thebes/gfxMacPlatformFontList.mm b/gfx/thebes/gfxMacPlatformFontList.mm
index 83bee904a8..04bde977b1 100644
--- a/gfx/thebes/gfxMacPlatformFontList.mm
+++ b/gfx/thebes/gfxMacPlatformFontList.mm
@@ -576,7 +576,10 @@ static bool FindTagInTableDir(const FallibleTArray<uint8_t>& table,
 #endif
   uint32_t i;
   const uint32_t *wtable = (reinterpret_cast<const uint32_t *>(table.Elements()));
-  for (i=3; i<(sizer/4); i+=4) { // Skip header
+  // Make sure we don't overrun the buffer
+  uint32_t count = sizer / 4;
+  uint32_t length = table.Length();
+  for (i=3; i<count && i<length; i+=4) { // Skip header
 #ifdef DEBUG_X
     char tag[5] = { table[j], table[j+1], table[j+2], table[j+3], '\0' };
     fprintf(stderr, "%s ", tag); // remember: big endian
@@ -632,8 +635,9 @@ MacOSFontEntry::HasFontTable(uint32_t aTableTag)
     if (!mIsDataUserFont || mIsLocalUserFont) TryGlobalFontTableCache();
 
     // Use cached directory to avoid repeatedly fetching the same data.
-    if (MOZ_LIKELY(mFontTableDirSize > 0))
+    if (MOZ_LIKELY(mFontTableDirSize > 0)) {
         return FindTagInTableDir(mFontTableDir, aTableTag, mFontTableDirSize);
+    }
 
     ByteCount sizer;
 
@@ -641,9 +645,8 @@ MacOSFontEntry::HasFontTable(uint32_t aTableTag)
       // If the header is abnormal, try the old, slower way in case this
       // is a gap in our algorithm.
       if (MOZ_UNLIKELY(sizer <= 12 || ((sizer-12) % 16) || sizer >= 1024)) {
-        fprintf(stderr, "Warning: TenFourFox found "
-                "abnormal font table dir in %s (%i).\n",
-                 NS_ConvertUTF16toUTF8(mName).get(), sizer);
+        fprintf(stderr, "Warning: Found abnormal font table dir in %s (%i).\n",
+                NS_ConvertUTF16toUTF8(mName).get(), sizer);
         return
         (::ATSFontGetTable(fontRef, aTableTag, 0, 0, 0, &sizer) == noErr);
       }
@@ -660,9 +663,9 @@ MacOSFontEntry::HasFontTable(uint32_t aTableTag)
         reinterpret_cast<void *>(mFontTableDir.Elements()), &sizer) == noErr)) {
 
         // Push to platform.
-        if (!mIsDataUserFont || mIsLocalUserFont)
+        if (!mIsDataUserFont || mIsLocalUserFont) {
              reinterpret_cast<gfxPlatformMac *>(gfxPlatform::GetPlatform())->SetCachedDirForFont(mName, reinterpret_cast<uint8_t *>(mFontTableDir.Elements()), mFontTableDirSize);
-
+        }
         return FindTagInTableDir(mFontTableDir, aTableTag, mFontTableDirSize);
       }
    }
@@ -1686,8 +1689,7 @@ gfxMacPlatformFontList::MakePlatformFont(const nsAString& aFontName,
             [psname isEqualToString:@".SFNSText-Medium"] ||
             [psname isEqualToString:@".SFNSDisplay-Medium"] ||
                 0) {
-            fprintf(stderr,
-"Warning: TenFourFox rejected ATSUI-incompatible web font %s.\n",
+            fprintf(stderr, "Warning: Rejected ATSUI-incompatible web font %s.\n",
                 [psname UTF8String]);
             [psname release];
             ::ATSFontDeactivate(containerRef, NULL,
-- 
2.50.1

